<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ninokz</title>
  
  <subtitle>你干嘛，哎哟</subtitle>
  <link href="https://ninokz.github.io/atom.xml" rel="self"/>
  
  <link href="https://ninokz.github.io/"/>
  <updated>2024-04-04T14:34:10.862Z</updated>
  <id>https://ninokz.github.io/</id>
  
  <author>
    <name>Ninokz</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>C++ 练习</title>
    <link href="https://ninokz.github.io/2024/04/04/code_practice/"/>
    <id>https://ninokz.github.io/2024/04/04/code_practice/</id>
    <published>2024-04-04T08:11:54.708Z</published>
    <updated>2024-04-04T14:34:10.862Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基础练习"><a class="header-anchor" href="#基础练习"></a>基础练习</h1><h2 id="数组"><a class="header-anchor" href="#数组"></a>数组</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 栈上</span></span><br><span class="line"><span class="type">int</span> a[] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125; <span class="comment">// 非显示指定大小</span></span><br><span class="line"><span class="type">int</span> b[<span class="number">3</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125; <span class="comment">// 显示指定大小</span></span><br><span class="line"><span class="type">int</span> c[][] = &#123;&#123;<span class="number">1</span>,<span class="number">2</span>&#125;&#125;<span class="comment">// 非显示指定大小</span></span><br><span class="line"><span class="comment">// 堆上</span></span><br><span class="line"><span class="type">int</span>* a = <span class="keyword">new</span> <span class="type">int</span>[<span class="number">3</span>];<span class="comment">// 显示指定大小</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> rows = <span class="number">3</span>;<span class="comment">// 显示指定大小,但是目前已经不推荐这样做，使用vector</span></span><br><span class="line"><span class="type">int</span> cols = <span class="number">4</span>;</span><br><span class="line"><span class="type">int</span>** b = <span class="keyword">new</span> <span class="type">int</span>*[rows];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; rows; i++) &#123;</span><br><span class="line">b[i] = <span class="keyword">new</span> <span class="type">int</span>[cols];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="算法"><a class="header-anchor" href="#算法"></a>算法</h1><h2 id="输入模式"><a class="header-anchor" href="#输入模式"></a>输入模式</h2><p>cin模式</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">nums</span><span class="params">(<span class="number">5</span>)</span></span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">cin &gt;&gt; nums[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>getline输入字符串（cin中遇到空格会读取不全字符串）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">string s;</span><br><span class="line"><span class="built_in">getline</span>(cin, s);</span><br><span class="line"><span class="comment">// 输出读入的字符串</span></span><br><span class="line">cout &lt;&lt; s &lt;&lt; endl;</span><br></pre></td></tr></table></figure><h2 id="LBLD"><a class="header-anchor" href="#LBLD"></a>LBLD</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;基础练习&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#基础练习&quot;&gt;&lt;/a&gt;基础练习&lt;/h1&gt;
&lt;h2 id=&quot;数组&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#数组&quot;&gt;&lt;/a&gt;数组&lt;/h2&gt;
&lt;figure class=</summary>
      
    
    
    
    <category term="Learning" scheme="https://ninokz.github.io/categories/Learning/"/>
    
    
    <category term="C++" scheme="https://ninokz.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>GNN 学习回顾</title>
    <link href="https://ninokz.github.io/2024/03/31/GNN/"/>
    <id>https://ninokz.github.io/2024/03/31/GNN/</id>
    <published>2024-03-31T14:52:55.605Z</published>
    <updated>2024-03-31T16:37:56.757Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a class="header-anchor" href="#前言"></a>前言</h1><p>​研一刚入学时分到的大方向是时间序列（Time-series）领域相关的方向，特别是关于多元时间序列相关的任务，本来想好了毕业相关课题做什么，但是出于一些客观原因，没有做纯时间序列相关的内容了，拓宽了一部分到网络异常方面，做时间序列+网络异常检测结合领域的东西。同时我导提出了关于再结合Dynamic Graph的建议，现在做的大概是时间序列+网络异常检测+动态图的三领域重叠的部分，也挺有挑战性，感觉有点不好下手。平时项目也多，GNN也是突然间就给加过来的，以前没怎么做过GNN方面，花了大半个月读Survey和Review入门了GNN&amp;动态图，发现结合动态图还真不太好去结合，现在我都还没找到合适的结合点切入去做实验设计，比较焦虑这一部分的内容。</p><p>​前不久看了一篇 AAAI 21 的关于多变量时间序列异常检测的<a href="https://arxiv.org/abs/2106.06947">论文</a>，但是这是多变量时间序列异常检测的邻域内容，也是属于纯时间序列相关的部分，我甚至将原作者的代码修改的更易于阅读了一点[<a href="https://github.com/Ninokz/GDN_remake">修改版</a>]。虽然发现了其中的文章作者提出的模型有部分可以修改的地方，但还是与网络异常检测+动态图找不到合适的结合点。也许，我可能还需要补充回顾一下关于GNN相关知识才能找到网络异常检测+动态图的结合点？</p><h1 id="GCN"><a class="header-anchor" href="#GCN"></a>GCN</h1><p><strong>首先是区别于数据的问题：</strong></p><p>对于传统的多层感知机（MLP）来说，它通常处理的是一个由多个独立样本组成的数据集，每个样本都有自己的特征向量和标签（对于监督学习任务）。每个样本都是独立处理的，模型在这些样本上进行训练，以学习特征与标签之间的映射关系。 而对于图卷积网络（GCN），情况有所不同。在GCN中，整个图被视为一个单一的数据实体，即使这个图可能包含成百上千个节点。在这种情况下，每个节点及其特征向量可以被看作是一个“样本”，而节点间的边则定义了这些样本之间的关系。因此，尽管整个数据集可能只包含一张图，这张图却包含了大量通过边相互连接的样本（即节点）</p><p>以前个人对GCN理解还是蛮有疑惑的，主要疑惑来自于，这个GNN相关的 * 数据怎么和我通常见到的TS常见数据集类型不一样，不是一条条的，<strong>直到看到了下述图片a才有所理解</strong>。</p><p><img src="https://picx.zhimg.com/70/v2-6ad8f3cf2e8d3701922cf65986c8533c_1440w.image?source=172ae18b&amp;biz_tag=Post" alt="怎么搭好一个GCN？只需这四步"></p><p>顺便一提，关于这里卷积有点意思，可以看下<a href="https://zhuanlan.zhihu.com/p/492303139">这篇文章</a></p><p><strong>GCN的工作过程：</strong></p><ol><li><p><strong>节点表示初始化</strong>：每个节点被初始化一个表示（如，节点的特征向量）。</p></li><li><p><strong>邻居信息聚合</strong>：每个节点通过聚合其邻居节点的表示来更新自己的表示。这个过程可以迭代多次，每次迭代称为一层GCN。</p></li><li><p><strong>特征变换</strong>：在聚合邻居信息的同时，通常会对特征进行线性变换（例如，通过乘以一个权重矩阵）。</p></li><li><p><strong>非线性激活</strong>：对更新后的节点表示应用非线性激活函数，如ReLU。</p></li><li><p><strong>读出（Readout）</strong>：对于图级别的任务，所有节点的表示会被进一步聚合以形成图的表示。</p></li></ol><p><strong>数学表达：</strong></p><p>给定一个图<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>G</mi><mo>=</mo><mo stretchy="false">(</mo><mi>V</mi><mo separator="true">,</mo><mi>E</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">G=(V,E)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">G</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mclose">)</span></span></span></span>，其中<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>V</mi></mrow><annotation encoding="application/x-tex">V</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span></span></span></span>是节点集合，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>E</mi></mrow><annotation encoding="application/x-tex">E</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span></span></span></span>是边集合。每个节点<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6595em;"></span><span class="mord mathnormal">i</span></span></span></span>都有一个特征向量<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">x_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>。GCN的一层可以用下面的公式表示：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msup><mi>H</mi><mrow><mo stretchy="false">(</mo><mi>l</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo></mrow></msup><mo>=</mo><mi>σ</mi><mrow><mo fence="true">(</mo><msup><mover accent="true"><mi>D</mi><mo>~</mo></mover><mrow><mo>−</mo><mfrac><mn>1</mn><mn>2</mn></mfrac></mrow></msup><mover accent="true"><mi>A</mi><mo>~</mo></mover><msup><mover accent="true"><mi>D</mi><mo>~</mo></mover><mrow><mo>−</mo><mfrac><mn>1</mn><mn>2</mn></mfrac></mrow></msup><msup><mi>H</mi><mrow><mo stretchy="false">(</mo><mi>l</mi><mo stretchy="false">)</mo></mrow></msup><msup><mi>W</mi><mrow><mo stretchy="false">(</mo><mi>l</mi><mo stretchy="false">)</mo></mrow></msup><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">H^{(l+1)} = \sigma\left(\tilde{D}^{-\frac{1}{2}}\tilde{A}\tilde{D}^{-\frac{1}{2}}H^{(l)}W^{(l)}\right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.938em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.938em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mbin mtight">+</span><span class="mord mtight">1</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.8em;vertical-align:-0.65em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size2">(</span></span><span class="mord"><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9202em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span></span><span style="top:-3.6023em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.1944em;"><span class="mord">~</span></span></span></span></span></span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.004em;"><span style="top:-3.413em;margin-right:0.05em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8443em;"><span style="top:-2.656em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.2255em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.384em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.344em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span></span></span></span></span></span></span></span></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9202em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal">A</span></span><span style="top:-3.6023em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.1111em;"><span class="mord">~</span></span></span></span></span></span></span><span class="mord"><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9202em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span></span><span style="top:-3.6023em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.1944em;"><span class="mord">~</span></span></span></span></span></span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.004em;"><span style="top:-3.413em;margin-right:0.05em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8443em;"><span style="top:-2.656em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.2255em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.384em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.344em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span></span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.938em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.938em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size2">)</span></span></span></span></span></span></span></p><p>其中：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>H</mi><mrow><mo stretchy="false">(</mo><mi>l</mi><mo stretchy="false">)</mo></mrow></msup></mrow><annotation encoding="application/x-tex">H^{(l)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.888em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.888em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span></span></span></span>是第<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>l</mi></mrow><annotation encoding="application/x-tex">l</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span></span></span></span>层的节点表示矩阵，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>H</mi><mrow><mo stretchy="false">(</mo><mn>0</mn><mo stretchy="false">)</mo></mrow></msup></mrow><annotation encoding="application/x-tex">H^{(0)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.888em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.888em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mtight">0</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span></span></span></span>是初始的节点特征矩阵。</p><ul><li><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>A</mi><mo>~</mo></mover><mo>=</mo><mi>A</mi><mo>+</mo><msub><mi>I</mi><mi>N</mi></msub></mrow><annotation encoding="application/x-tex">\tilde{A} = A + I_N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9202em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9202em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal">A</span></span><span style="top:-3.6023em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.1111em;"><span class="mord">~</span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">A</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">N</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>是图的邻接矩阵<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi></mrow><annotation encoding="application/x-tex">A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">A</span></span></span></span>加上单位矩阵<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>I</mi><mi>N</mi></msub></mrow><annotation encoding="application/x-tex">I_N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">N</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>（<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span></span></span></span>是节点的数量），这样做是为了在聚合邻居信息的同时保留自身的信息。</p></li><li><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>D</mi><mo>~</mo></mover></mrow><annotation encoding="application/x-tex">\tilde{D}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9202em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9202em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span></span><span style="top:-3.6023em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.1944em;"><span class="mord">~</span></span></span></span></span></span></span></span></span></span>是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>A</mi><mo>~</mo></mover></mrow><annotation encoding="application/x-tex">\tilde{A}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9202em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9202em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal">A</span></span><span style="top:-3.6023em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.1111em;"><span class="mord">~</span></span></span></span></span></span></span></span></span></span>的度矩阵的对角矩阵，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mover accent="true"><mi>D</mi><mo>~</mo></mover><mrow><mi>i</mi><mi>i</mi></mrow></msub><mo>=</mo><msub><mo>∑</mo><mi>j</mi></msub><msub><mover accent="true"><mi>A</mi><mo>~</mo></mover><mrow><mi>i</mi><mi>j</mi></mrow></msub></mrow><annotation encoding="application/x-tex">\tilde{D}_{ii} = \sum_j \tilde{A}_{ij}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0702em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9202em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span></span><span style="top:-3.6023em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.1944em;"><span class="mord">~</span></span></span></span></span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">ii</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.356em;vertical-align:-0.4358em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:0em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.162em;"><span style="top:-2.4003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4358em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9202em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal">A</span></span><span style="top:-3.6023em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.1111em;"><span class="mord">~</span></span></span></span></span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">ij</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span></p></li><li><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>σ</mi></mrow><annotation encoding="application/x-tex">\sigma</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span></span></span></span>是非线性激活函数，如ReLU</p></li><li><p><strong>邻居信息聚合</strong>：通过<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mover accent="true"><mi>D</mi><mo>~</mo></mover><mrow><mo>−</mo><mfrac><mn>1</mn><mn>2</mn></mfrac></mrow></msup><mover accent="true"><mi>A</mi><mo>~</mo></mover><msup><mover accent="true"><mi>D</mi><mo>~</mo></mover><mrow><mo>−</mo><mfrac><mn>1</mn><mn>2</mn></mfrac></mrow></msup></mrow><annotation encoding="application/x-tex">\tilde{D}^{-\frac{1}{2}}\tilde{A}\tilde{D}^{-\frac{1}{2}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.954em;"></span><span class="mord"><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9202em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span></span><span style="top:-3.6023em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.1944em;"><span class="mord">~</span></span></span></span></span></span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.954em;"><span style="top:-3.363em;margin-right:0.05em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8443em;"><span style="top:-2.656em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.2255em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.384em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.344em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span></span></span></span></span></span></span></span></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9202em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal">A</span></span><span style="top:-3.6023em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.1111em;"><span class="mord">~</span></span></span></span></span></span></span><span class="mord"><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9202em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span></span><span style="top:-3.6023em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.1944em;"><span class="mord">~</span></span></span></span></span></span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.954em;"><span style="top:-3.363em;margin-right:0.05em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8443em;"><span style="top:-2.656em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.2255em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.384em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.344em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span></span></span></span></span></span></span></span></span></span></span></span>这个矩阵乘法，每个节点可以聚合其邻居（包括自己）的信息。</p></li><li><p><strong>特征变换</strong>：通过<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>W</mi><mrow><mo stretchy="false">(</mo><mi>l</mi><mo stretchy="false">)</mo></mrow></msup></mrow><annotation encoding="application/x-tex">W^{(l)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.888em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.888em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span></span></span></span>，可以对聚合后的特征进行线性变换</p></li><li><p><strong>非线性激活</strong>：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>σ</mi></mrow><annotation encoding="application/x-tex">\sigma</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span></span></span></span>引入非线性，增加模型的表达能力</p></li><li><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>W</mi><mrow><mo stretchy="false">(</mo><mi>l</mi><mo stretchy="false">)</mo></mrow></msup></mrow><annotation encoding="application/x-tex">W^{(l)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.888em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.888em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span></span></span></span>是第<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>l</mi></mrow><annotation encoding="application/x-tex">l</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span></span></span></span>层的可学习权重矩阵</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>W</mi><mrow><mo stretchy="false">(</mo><mi>l</mi><mo stretchy="false">)</mo></mrow></msup></mrow><annotation encoding="application/x-tex">W^{(l)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.888em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.888em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span></span></span></span>在图卷积网络（GCN）中的作用非常关键，它主要用于特征变换。具体来说，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>W</mi><mrow><mo stretchy="false">(</mo><mi>l</mi><mo stretchy="false">)</mo></mrow></msup></mrow><annotation encoding="application/x-tex">W^{(l)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.888em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.888em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span></span></span></span>是第<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>l</mi></mrow><annotation encoding="application/x-tex">l</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span></span></span></span>层的可学习权重矩阵，用于对每个节点聚合邻居信息后的特征进行线性变换</p><ol><li><strong>维度变换</strong>：通过<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>W</mi><mrow><mo stretchy="false">(</mo><mi>l</mi><mo stretchy="false">)</mo></mrow></msup></mrow><annotation encoding="application/x-tex">W^{(l)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.888em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.888em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span></span></span></span>，可以改变节点特征的维度，即可以从较高维度映射到较低维度（降维），或从较低维度映射到较高维度（升维），以适应后续层的需要或是最终任务的需求。</li><li><strong>特征提取</strong>：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>W</mi><mrow><mo stretchy="false">(</mo><mi>l</mi><mo stretchy="false">)</mo></mrow></msup></mrow><annotation encoding="application/x-tex">W^{(l)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.888em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.888em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span></span></span></span>可以视为一种特征提取器，它可以帮助模型学习到在当前任务中更为重要的特征表示。通过训练过程中的梯度下降，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>W</mi><mrow><mo stretchy="false">(</mo><mi>l</mi><mo stretchy="false">)</mo></mrow></msup></mrow><annotation encoding="application/x-tex">W^{(l)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.888em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.888em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span></span></span></span>会被优化，以更好地捕捉和提取对当前任务有用的信息。</li><li><strong>提高模型表达能力</strong>：通过引入可学习的参数<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>W</mi><mrow><mo stretchy="false">(</mo><mi>l</mi><mo stretchy="false">)</mo></mrow></msup></mrow><annotation encoding="application/x-tex">W^{(l)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.888em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.888em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span></span></span></span>，GCN可以学习到更加复杂的特征表示，增强模型的非线性表达能力。这对于处理复杂的图结构数据，如社交网络、分子结构等，是非常必要的。</li><li><strong>促进信息融合</strong>：在多层GCN中，每一层的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>W</mi><mrow><mo stretchy="false">(</mo><mi>l</mi><mo stretchy="false">)</mo></mrow></msup></mrow><annotation encoding="application/x-tex">W^{(l)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.888em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.888em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span></span></span></span>可以帮助模型将不同邻居的信息以及不同特征的信息有效地融合在一起，以便更好地理解节点和图的整体结构</li></ol></li></ul><p><strong>问题</strong></p><ol><li><strong>为什么GCN他这个是一层是通过旧的一层去计算的？</strong></li></ol><p>​GCN通过旧的层去计算新的层是基于图数据的本质和信息传播机制的需要。在图卷积网络（GCN）中，每一层的目的是通过聚合邻居的信息来更新节点的表示，这个过程可以视为在图中进行信息的传播。</p><ul><li><strong>信息传播</strong>：在图结构中，节点之间通过边相互连接，节点的特征信息需要通过这些边来传递和聚合。每一次的传播过程（即一层GCN）可以被看作是节点收集其直接邻居的信息。通过多层的迭代，节点能够间接地收集更远距离邻居的信息，从而获得全局的图结构信息。</li><li><strong>深度学习的层次结构</strong>：GCN借鉴了深度学习中的层次结构概念，其中每一层的输出都会作为下一层的输入。这种设计使得网络可以学习到从局部到全局的特征表示，每一层都在前一层基础上进一步提炼和整合信息。</li><li><strong>非线性特征组合</strong>：通过层与层之间的非线性变换（例如通过ReLU激活函数），GCN能够学习更加复杂和抽象的特征表示。这种层叠的非线性变换是深度学习能够捕获高级抽象特征的关键。</li><li><strong>局部到全局的信息整合</strong>：在图的上下文中，初始层通常捕获节点的局部信息（例如，一个节点及其直接邻居）。随着层数的增加，每个节点能够整合来自更广范围的邻居信息，从而形成更全面的全局视图。</li></ul><ol start="2"><li><p><strong><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>W</mi><mi>l</mi></msup></mrow><annotation encoding="application/x-tex">W^{l}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8491em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span></span></span></span></span></span></span></span></span></span></span></span>矩阵问题</strong></p><p>我们的这个矩阵是不停被迭代吗？每经过一次迭代都有一个针对上次的新的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>W</mi><mi>l</mi></msup></mrow><annotation encoding="application/x-tex">W^{l}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8491em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span></span></span></span></span></span></span></span></span></span></span></span>的产生，直至loss收敛且结果最优时，迭代出的w^l就是最好的？</p><p>在图卷积网络（GCN）中，每一层通常都有自己的权重矩阵（记为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>W</mi></mrow><annotation encoding="application/x-tex">W</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">W</span></span></span></span>），这与传统的多层感知机（MLP）或深度神经网络中的做法类似，其中每一层也有自己的权重矩阵。在GCN的上下文中，权重矩阵用于转换节点特征，以便在每个图卷积层中学习更高级别的特征表示。</p><p>在一个典型的GCN模型中，你可能有多个图卷积层，每个层都执行以下步骤：</p><ol><li><p><strong>聚合邻居特征</strong>：每个节点收集其邻居的特征信息（以及自身的特征）。</p></li><li><p><strong>特征变换</strong>：聚合得到的特征通过乘以权重矩阵<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>W</mi></mrow><annotation encoding="application/x-tex">W</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">W</span></span></span></span>进行变换。每一层都有一个不同的权重矩阵<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>W</mi><mrow><mo stretchy="false">(</mo><mi>l</mi><mo stretchy="false">)</mo></mrow></msup></mrow><annotation encoding="application/x-tex">W^{(l)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.888em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.888em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span></span></span></span>，这里的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>l</mi></mrow><annotation encoding="application/x-tex">l</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span></span></span></span>表示层的索引。</p></li><li><p><strong>非线性激活</strong>：变换后的特征通常会通过一个非线性激活函数，如ReLU，来增加模型的非线性能力。</p></li></ol><p>因此，如果你有一个由<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>L</mi></mrow><annotation encoding="application/x-tex">L</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">L</span></span></span></span>层组成的GCN，你将有<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>L</mi></mrow><annotation encoding="application/x-tex">L</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">L</span></span></span></span>个不同的权重矩阵<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>W</mi><mrow><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow></msup><mo separator="true">,</mo><msup><mi>W</mi><mrow><mo stretchy="false">(</mo><mn>2</mn><mo stretchy="false">)</mo></mrow></msup><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo separator="true">,</mo><msup><mi>W</mi><mrow><mo stretchy="false">(</mo><mi>L</mi><mo stretchy="false">)</mo></mrow></msup></mrow><annotation encoding="application/x-tex">W^{(1)}, W^{(2)}, ..., W^{(L)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0824em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.888em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mtight">1</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.888em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mtight">2</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">...</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.888em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight">L</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span></span></span></span>，每个对应于网络中的一个层。在训练过程中，所有这些权重矩阵都会通过反向传播算法进行更新，以最小化最终的损失函数。</p><p>值得注意的是，在GCN中，并不是每个节点都有一个独立的权重矩阵。相反，同一层内的所有节点共享相同的权重矩阵<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>W</mi><mrow><mo stretchy="false">(</mo><mi>l</mi><mo stretchy="false">)</mo></mrow></msup></mrow><annotation encoding="application/x-tex">W^{(l)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.888em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.888em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span></span></span></span>。这种权重共享机制是卷积神经网络（包括GCN）的一个关键特征，它有助于模型泛化，并减少了模型的参数数量。</p><p>总结来说，尽管在GCN中每个图卷积层都有自己的权重矩阵，但这些矩阵是在该层的所有节点间共享的。这使得模型能够学习到在图中普遍适用的特征转换，从而能够更好地泛化到新的节点或图上。</p></li><li><p><strong>输入矩阵<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>H</mi><mn>0</mn></msup></mrow><annotation encoding="application/x-tex">H^{0}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span></span></span></span></span></span></span></span> 与输出矩阵 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>H</mi><mi>l</mi></msup></mrow><annotation encoding="application/x-tex">H^{l}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8491em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span></span></span></span></span></span></span></span></span></span></span></span> 是图邻接矩阵？</strong></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>H</mi><mn>0</mn></msup></mrow><annotation encoding="application/x-tex">H^{0}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span></span></span></span></span></span></span></span>通常指的是图的初始特征矩阵，而不是邻接矩阵。<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>H</mi><mi>l</mi></msup></mrow><annotation encoding="application/x-tex">H^{l}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8491em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span></span></span></span></span></span></span></span></span></span></span></span>不是新的邻接矩阵，而是经过<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>l</mi></mrow><annotation encoding="application/x-tex">l</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span></span></span></span>层图卷积后每个节点的新的特征表示。这些新的特征可以捕捉到节点的高级结构信息和其邻居的特征信息。在许多应用中，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>H</mi><mi>l</mi></msup></mrow><annotation encoding="application/x-tex">H^{l}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8491em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span></span></span></span></span></span></span></span></span></span></span></span>可以用于节点分类、图分类、节点聚类等任务</p><p>这里的概念分开来看：</p><ul><li><p><strong>特征矩阵</strong> (<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>H</mi><mn>0</mn></msup></mrow><annotation encoding="application/x-tex">H^{0}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span></span></span></span></span></span></span></span>)：在GCN的输入层，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>H</mi><mn>0</mn></msup></mrow><annotation encoding="application/x-tex">H^{0}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span></span></span></span></span></span></span></span>表示图中每个节点的特征向量的集合。如果图有<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span></span></span></span>个节点，每个节点有<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>F</mi></mrow><annotation encoding="application/x-tex">F</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span></span></span></span>个特征，则<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>H</mi><mn>0</mn></msup></mrow><annotation encoding="application/x-tex">H^{0}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span></span></span></span></span></span></span></span>的维度将是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>N</mi><mo>×</mo><mi>F</mi></mrow><annotation encoding="application/x-tex">N \times F</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span></span></span></span>。这是GCN处理的输入数据。</p></li><li><p><strong>邻接矩阵</strong> (<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi></mrow><annotation encoding="application/x-tex">A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">A</span></span></span></span>)：邻接矩阵表示图中节点之间的连接情况。如果图有<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span></span></span></span>个节点，则邻接矩阵的维度为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>N</mi><mo>×</mo><mi>N</mi></mrow><annotation encoding="application/x-tex">N \times N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span></span></span></span>。如果节点<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6595em;"></span><span class="mord mathnormal">i</span></span></span></span>和节点<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>j</mi></mrow><annotation encoding="application/x-tex">j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.854em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span></span></span></span>之间存在边，则<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>A</mi><mrow><mi>i</mi><mi>j</mi></mrow></msub><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">A_{ij} = 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9694em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">ij</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span>（或者在加权图中为边的权重），否则<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>A</mi><mrow><mi>i</mi><mi>j</mi></mrow></msub><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">A_{ij} = 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9694em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">ij</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span>。</p></li></ul></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;
&lt;p&gt;​		研一刚入学时分到的大方向是时间序列（Time-series）领域相关的方向，特别是关于多元时间序列相关的任务，本来想好了毕业相关课题做什么，但是出于</summary>
      
    
    
    
    <category term="Learning" scheme="https://ninokz.github.io/categories/Learning/"/>
    
    
    <category term="Deep Learning" scheme="https://ninokz.github.io/tags/Deep-Learning/"/>
    
  </entry>
  
  <entry>
    <title>C++ 复习笔记</title>
    <link href="https://ninokz.github.io/2024/03/27/cpp-review-for-interview/"/>
    <id>https://ninokz.github.io/2024/03/27/cpp-review-for-interview/</id>
    <published>2024-03-27T02:38:31.093Z</published>
    <updated>2024-04-05T10:48:46.885Z</updated>
    
    <content type="html"><![CDATA[<h1 id="起始"><a class="header-anchor" href="#起始"></a>起始</h1><p>这篇文章应该是 blog 里更的第二篇文章，最近开始准备今年夏季实习的事情，虽然C/C++&amp;CSharp都会一点，但是感觉实习面试时的问题我会答不上来，所以准备了这篇笔记，一是记录学习笔记，二是督促一下自己吧。注意本文在使用对象一词时并不单单限定于OO中的面向对象的对象的意思。</p><h1 id="C-C-language"><a class="header-anchor" href="#C-C-language"></a>C/C++ language</h1><h2 id="Keywords-🔑"><a class="header-anchor" href="#Keywords-🔑"></a>Keywords 🔑</h2><h3 id="const"><a class="header-anchor" href="#const"></a>const</h3><p>const限定符用处是：对被修饰<strong>对象</strong>进行限定，在初始化后对象在后续过程中不能进行修改操作，分为修饰变量、修饰指针、修饰引用、修饰函数</p><p><strong>区别于宏</strong></p><table><thead><tr><th>宏定义 #define</th><th>const 常量</th></tr></thead><tbody><tr><td>宏定义，相当于字符替换</td><td>常量声明</td></tr><tr><td>预处理器处理</td><td>编译器处理</td></tr><tr><td><strong>无类型安全检查</strong></td><td><strong>有类型安全检查</strong></td></tr><tr><td>不分配内存</td><td>要分配内存</td></tr><tr><td>存储在代码段</td><td>存储在数据段</td></tr><tr><td>可通过 <code>#undef</code> 取消</td><td>不可取消</td></tr></tbody></table><h4 id="const-引用"><a class="header-anchor" href="#const-引用"></a>const 引用</h4><p>指的是对常量对象进行引用，但是注意const引用是将对const 修饰的某类型对象限定为不可修改</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> a = <span class="number">5</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span>&amp; aRef = a;</span><br><span class="line"><span class="type">int</span>&amp; b = aRef; </span><br><span class="line"><span class="comment">// Error: cannot bind non-const lvalue reference of type &#x27;int&amp;&#x27; to an rvalue of type &#x27;const int&#x27;</span></span><br><span class="line"><span class="comment">// 因为如果成了，那我们可以根据b修改a的值了，而a本身不可修改</span></span><br></pre></td></tr></table></figure><h4 id="const-指针"><a class="header-anchor" href="#const-指针"></a>const 指针</h4><p>从以下代码看出const修饰的影响，有一个名词叫做<strong>顶层const</strong>和<strong>底层const</strong>，前者表示指针本身是常量（不可更改），后者表示指针所指对象是常量（对象不可更改），通常意义上来讲顶层const的限制弱于底层 const。所以在进行拷贝操作时，<strong>顶层const基本上不受影响，而底层const的限制性更大</strong>，当进行拷贝考入考出时，左右对象必须是相同的底层const资格（因为执行对象拷贝时有限制，常量的底层const不能赋值给非常量的底层const）</p><p><strong>代码示例1</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> a = <span class="number">5</span>;   <span class="comment">// 顶层const</span></span><br><span class="line"><span class="type">int</span> b = <span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span>* c = &amp;a; <span class="comment">// 底层const</span></span><br><span class="line"><span class="type">int</span>* <span class="type">const</span> d = &amp;b; <span class="comment">// 顶层const</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span>* <span class="type">const</span> e = &amp;a; <span class="comment">// 前一个为底层const 后一个为顶层const</span></span><br><span class="line"></span><br><span class="line">c = &amp;b; <span class="comment">// OK</span></span><br><span class="line">*c = <span class="number">6</span>; <span class="comment">// Error</span></span><br><span class="line"></span><br><span class="line">d = &amp;a; <span class="comment">// Error</span></span><br><span class="line">*d = <span class="number">10</span>; <span class="comment">// OK</span></span><br><span class="line"></span><br><span class="line">e = &amp;b; <span class="comment">// Error</span></span><br><span class="line">*e = <span class="number">7</span>; <span class="comment">// Error</span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> e = <span class="number">5</span>;</span><br><span class="line">d = &amp;e; <span class="comment">// Error</span></span><br></pre></td></tr></table></figure><p>底层const和顶层const</p><ul><li><strong>顶层</strong>const：指的是const修饰的变量<strong>本身</strong>是一个常量，无法修改，指的是指针，就是 * 号的右边</li><li><strong>底层</strong>const：指的是const修饰的变量<strong>所指向的对象</strong>是一个常量，指的是所指变量，就是 * 号的左边</li></ul><h4 id="const函数"><a class="header-anchor" href="#const函数"></a>const函数</h4><p>修饰成员函数，说明该成员函数内不能修改成员变量</p><p><strong>小结</strong></p><p>这部分讲的大概很复杂很绕，其实不要去记什么常量引用，常量啥的，只需要记住<em><strong>const修饰对象将会导致一个不可更改的对象即可</strong></em>。对待这个东西我个人的处理看待方式就是，先搞清楚目标对象是什么样的const，然后再做处理，也许和指针引用搭配的时候是有点绕。在确定对象是在当前过程中readonly的，那么我们就应该对其const修饰，对于非内部数据的输入参数，应该将单纯的值类型<code>A a</code>更改为<code>const A&amp; a</code>，避免了拷贝，同时避免了对其修改，提高了效率</p><h3 id="static"><a class="header-anchor" href="#static"></a>static</h3><p>对修饰对象更改其存储区域和生命周期，使得变量存储在静态区，在运行前分配了空间。由于直接存储在静态区，在多人开发项目时，为了防止与他人命名空间里的函数重名，通过static修饰能做到这一点。</p><p>修饰变量：变量所在对象只保存一个该变量，而且能够直接访问</p><p>修饰成员函数：不需要生成对象实例就可以访问该函数</p><p><strong>static 变量存储于全局数据区</strong></p><p><strong>static 函数仍然存储与代码区</strong></p><h3 id="this"><a class="header-anchor" href="#this"></a>this</h3><p><strong>隐式访问</strong>：在类的非静态成员函数中，<code>this</code>指针是隐式可用的，它指向调用成员函数的对象实例</p><p><strong>类型</strong>：在类<code>T</code>的成员函数内，<code>this</code>的类型是<code>T* const</code>。这意味着<code>this</code>是一个指向<code>T</code>类型的常量指针，你不能改变<code>this</code>指针的指向，即不能让<code>this</code>指向另一个对象，但可以修改这个对象的成员（除非成员是<code>const</code>）底层const</p><p><strong>const成员函数</strong>：在const成员函数中，<code>this</code>指针的类型是<code>const T* const</code>，这意味着你既不能改变<code>this</code>指针的指向，也不能通过<code>this</code>指针修改对象的成员</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> value;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 成员函数修改对象成员</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setValue</span><span class="params">(<span class="type">int</span> value)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 使用this指针明确指定成员变量</span></span><br><span class="line">        <span class="keyword">this</span>-&gt;value = value;</span><br><span class="line">    &#125;   </span><br><span class="line">     <span class="comment">// const成员函数，不修改任何成员变量</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">printValue</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 输出成员变量value的值</span></span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Value: &quot;</span> &lt;&lt; value &lt;&lt; std::endl;</span><br><span class="line">        <span class="comment">// this-&gt;value = 5; // 错误：这会尝试修改成员变量，但在const成员函数中是不允许的</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    MyClass obj;</span><br><span class="line">    obj.<span class="built_in">setValue</span>(<span class="number">10</span>); <span class="comment">// 调用成员函数设置value  此时是 T* const起作用</span></span><br><span class="line">    bj.<span class="built_in">printValue</span>(); <span class="comment">// 调用const成员函数此时是 const T* const起作用</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="inline"><a class="header-anchor" href="#inline"></a>inline</h3><p>内联函数是C++中的一种函数声明方式，它告诉（建议）编译器在调用函数时将函数的代码插入到调用处，而不是像普通函数那样通过跳转执行。这样做可以减少函数调用的开销，提高程序的执行效率</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> c = <span class="built_in">add</span>(<span class="number">3</span>,<span class="number">4</span>);</span><br><span class="line"><span class="comment">//add()函数被声明为内联函数。当调用add()函数时，编译器会尝试将函数的代码直接插入到调用处，而不是生成一个函数调用的指令</span></span><br></pre></td></tr></table></figure><p><strong>特性：</strong></p><p>编译器不一定会遵循inline关键字，它可能会根据具体情况决定是否将函数内联。通常情况下，编译器会将短小的函数内联，而对于较大的函数，编译器可能会忽略<code>inline</code>关键字</p><p><strong>优点：</strong></p><ol><li>内联函数同宏函数一样将在被调用处进行代码展开，省去了参数压栈、栈帧开辟与回收，结果返回等，从而提高程序运行速度。</li><li>内联函数相比宏函数来说，在代码展开时，会做安全检查或自动类型转换（同普通函数），而<strong>宏定义则不会</strong>。</li><li>在类中声明同时定义的成员函数，自动转化为内联函数，因此内联函数可以访问类的成员变量，宏<strong>定义则不能</strong>。</li><li>内联函数在运行时可调试，而<strong>宏定义不可以</strong></li></ol><p>**缺点：**包括可能导致代码体积增加，因为函数的代码会被复制到每个调用处，以及可能增加编译时间</p><p>Q:关于其他函数是否可以内联</p><p><strong>构造函数和析构函数内联：</strong></p><p>内联机制主要用于提高小型函数的执行效率，对于复杂的构造函数和析构函数，使用内联需要谨慎考虑</p><p><strong>将构造函数和析构函数声明为inline是没有什么意义</strong>的，即编译器并<strong>不</strong>真正对声明为inline的构造和析构函数<strong>进行内联操作</strong>，因为编译器会在构造和析构函数中添加额外的操作（申请/释放内存，构造/析构对象等），致使构造函数/析构函数并不像看上去的那么精简。</p><p><strong>虚函数内联：</strong></p><p><strong>分情况讨论：当是指向派生类的指针（多态性）调用声明为inline的虚函数时，不会内联展开；当是对象本身调用虚函数时，会内联展开。</strong></p><p>虚函数是为了实现运行时多态性而设计的，它允许在派生类中重写基类中的同名函数，而在运行时动态地确定应该调用哪个版本的函数，内联函数允许在调用处直接展开函数的代码，以减少函数调用的开销。但是，对于虚函数来说，编译器需要在运行时确定实际调用的函数版本，这与内联函数的特性相矛盾。因此，虚函数通常不会被声明为内联函数。虚函数的实现通常涉及虚函数表（vtable）和虚函数指针（vptr），而内联函数的展开是在编译期间完成的，这两者的机制不兼容。</p><h3 id="sizeof"><a class="header-anchor" href="#sizeof"></a>sizeof</h3><p>本节主要强调<strong>数据对齐</strong>的问题</p><ul><li><p>为什么要使用数据对齐技术</p><ul><li><p><strong>硬件优化</strong>：许多硬件平台对特定类型的数据访问有最优的内存对齐要求。正确对齐的数据可以直接从内存读取，而<strong>未对齐的数据可能需要多次访问才能完成读取</strong>，这样会降低性能。</p></li><li><p><strong>平台要求</strong>：某些平台可能不允许未对齐的内存访问，尝试这样做可能导致硬件异常。</p></li></ul></li><li><p>对齐方式</p><ul><li><strong>自然对齐</strong>：数据的对齐边界通常是其类型大小的最小倍数。例如，<code>int</code>类型（假设为4字节）的数据应该在4字节对齐的地址处开始。</li><li><strong>指定对齐</strong>：C++11引入了<code>alignas</code>关键字，允许程序员指定变量或类型的对齐要求</li></ul></li><li><p>其它</p><ul><li><p>虚函数本身、成员函数（包括静态与非静态）和静态数据成员都是不占用类对象的存储空间</p></li><li><p>对于包含虚函数的类，不管有多少个虚函数，只有一个虚指针,vptr的大小</p></li></ul></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Say</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;A::Say()&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 仅含vptr没有数据成员所以sizeof(A)只有一个指针的大小, 64位机器上这个结果是 8 字节</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">char</span> a;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Say</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;A::Say()&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 16字节， char a被对齐了</span></span><br></pre></td></tr></table></figure><p><strong>一个指针占内存的大小跟编译环境有关，而与机器的位数无关</strong></p><h3 id="volatile"><a class="header-anchor" href="#volatile"></a>volatile</h3><p>编译器会对代码进行各种优化，包括对变量的读写操作进行优化，如将变量的值缓存到寄存器中，以提高程序的执行效率，告诉编译器不要对这些变量的读写操作进行优化</p><h3 id="extern-“c”"><a class="header-anchor" href="#extern-“c”"></a>extern “c”</h3><ul><li>被 extern 限定的函数或变量是 extern 类型的</li><li>被 <code>extern &quot;C&quot;</code> 修饰的变量和函数是按照 C 语言方式编译和链接的</li></ul><h3 id="struct-in-C-C"><a class="header-anchor" href="#struct-in-C-C"></a>struct in C++ &amp; C</h3><p>C：</p><p>struct只能作为单纯用作数据的复合类型，结构体和函数名同名不冲突</p><p>C++:</p><p>可以定义函数、访问修饰符，若结构体的名字与函数名相同，使用结构体，只能使用带struct定义</p><h3 id="struct-vs-class-in-c"><a class="header-anchor" href="#struct-vs-class-in-c"></a>struct vs class in c++</h3><p>二者几乎相同，最本质的一个区别就是默认的访问控制</p><p>默认的继承访问权限。struct 是 public 的，class 是 private 的。</p><p>struct 作为数据结构的实现体，它默认的数据访问控制是 public 的，而 class 作为对象的实现体，它默认的成员变量访问控制是 private 的</p><h3 id="union"><a class="header-anchor" href="#union"></a>union</h3><p>联合（union）是一种节省空间的特殊的类，一个 union 可以有多个数据成员，但是在任意时刻只有一个数据成员可以有值，当某个成员被赋值后其他成员变为未定义状态。</p><ul><li>默认访问控制符为 public</li><li>可以含有构造函数、析构函数</li><li>不能含有引用类型的成员</li><li>不能继承自其他类，不能作为基类</li><li>不能含有虚函数</li></ul><h3 id="union-vs-struct-vs-classs"><a class="header-anchor" href="#union-vs-struct-vs-classs"></a>union vs struct vs classs</h3><table><thead><tr><th>union</th><th>struct</th><th>class</th></tr></thead><tbody><tr><td>定义多个成员，使用一个</td><td>定义多个成员，使用多个</td><td>定义多个成员，使用多个</td></tr><tr><td>默认public访问</td><td>默认public访问</td><td>默认private访问</td></tr><tr><td>不可以继承</td><td>可以继承</td><td>可以继承</td></tr></tbody></table><h3 id="explict"><a class="header-anchor" href="#explict"></a>explict</h3><ul><li>explicit 修饰构造函数时，可以防止<strong>隐式转换和复制初始化</strong></li><li>explicit 修饰转换函数时，可以防止隐式转换</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">MyClass</span>(<span class="type">int</span> x) &#123;</span><br><span class="line">        <span class="comment">// constructor code</span></span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;MyClass copy constructor&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(MyClass obj)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// function code</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">func</span>(<span class="number">10</span>); <span class="comment">// 编译通过，隐式类型转换为 MyClass 对象</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">MyClass</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// constructor code</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(MyClass obj)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// function code</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">func</span>(<span class="number">10</span>); <span class="comment">// 编译错误，禁止隐式类型转换</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="enum枚举类"><a class="header-anchor" href="#enum枚举类"></a>enum枚举类</h3><p>传统枚举有问题：</p><ul><li>会隐式转换为int</li><li>用来表征枚举变量的实际类型不能明确指定，从而无法支持枚举类型的前向声明。</li><li>作用域不受限,会容易引起命名冲突</li></ul><p>C++11使用枚举类解决以上问题</p><ul><li>新的enum的作用域不在是全局的</li><li>不能隐式转换成其他类型</li><li>以指定用特定的类型来存储enum</li></ul><h3 id="auto"><a class="header-anchor" href="#auto"></a>auto</h3><p>类型推断关键字，但是推断结果有时会和初始类型小有区别，auto一般会忽略顶层const而保存底层const</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> i = <span class="number">10</span>, &amp;r = i;</span><br><span class="line">   <span class="keyword">auto</span> b = r; <span class="comment">// b int not const int</span></span><br><span class="line">   <span class="type">const</span> <span class="keyword">auto</span> c = r; <span class="comment">// c const int</span></span><br><span class="line">   <span class="keyword">auto</span> d = &amp;i; <span class="comment">// d const int*</span></span><br><span class="line">   <span class="type">const</span> <span class="keyword">auto</span> e = &amp;i; <span class="comment">// e const int*</span></span><br></pre></td></tr></table></figure><h3 id="decltype"><a class="header-anchor" href="#decltype"></a>decltype</h3><p>decltype：类型推断，应用于想从目标推断定义目标的类型，选择并返回操作数的数据类型。但是注意decltype(目标)和decltype((目标))的区别</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">decltype</span>(i) j = <span class="number">1</span>;</span><br><span class="line">std::cout &lt;&lt; <span class="built_in">typeid</span>(i).<span class="built_in">name</span>() &lt;&lt; std::endl;</span><br><span class="line"><span class="keyword">decltype</span>((i)) k = i;</span><br><span class="line">std::cout &lt;&lt; <span class="built_in">typeid</span>(k).<span class="built_in">name</span>() &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">std::cout &lt;&lt; &amp;i &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; &amp;j &lt;&lt; std::endl;<span class="comment">// j is an int, so the address of j is different from i</span></span><br><span class="line">std::cout &lt;&lt; &amp;k &lt;&lt; std::endl;<span class="comment">// k is a reference to i, so the address of k is the same as i</span></span><br></pre></td></tr></table></figure><h3 id="类型转换关键字"><a class="header-anchor" href="#类型转换关键字"></a>类型转换关键字</h3><p><code>static_cast</code>是最常用的类型转换形式，用于基本数据类型之间的转换，如整型和浮点型、指针类型之间的转换（只要它们是相关的类型），以及类层次结构中<strong>向上</strong>（子类指针或引用转换为基类指针或引用）的转换。</p><p><code>dynamic_cast</code>专门用于处理类的层次结构中的<strong>向下</strong>转换（基类指针或引用转换为派生类指针或引用），并在运行时检查类型的安全性。它要求至少有一个基类声明为虚拟的（即至少有一个虚函数）。</p><p><code>const_cast</code>用于修改类型的<code>const</code>或<code>volatile</code>属性，比如将一个<code>const</code>指针转换为非<code>const</code>指针，允许修改所指向的数据。它不能改变非<code>const</code>对象的<code>const</code>性质，也不能改变对象的类型。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> i = <span class="number">10</span>;</span><br><span class="line"><span class="type">float</span> f = <span class="built_in">static_cast</span>&lt;<span class="type">float</span>&gt;(i); <span class="comment">// 整型转换为浮点型</span></span><br><span class="line"></span><br><span class="line">Base* b = <span class="keyword">new</span> Derived;</span><br><span class="line">Derived* d = <span class="built_in">dynamic_cast</span>&lt;Derived*&gt;(b); <span class="comment">// 基类指针转换为派生类指针</span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span>* ci = <span class="keyword">new</span> <span class="built_in">int</span>(<span class="number">10</span>);</span><br><span class="line"><span class="type">int</span>* i = <span class="built_in">const_cast</span>&lt;<span class="type">int</span>*&gt;(ci); <span class="comment">// 移除const属性</span></span><br></pre></td></tr></table></figure><h3 id="NULL-vs-nullptr"><a class="header-anchor" href="#NULL-vs-nullptr"></a>NULL vs nullptr</h3><ul><li><strong><code>NULL</code></strong>：<code>NULL</code>通常被定义为整数<code>0</code>，或者是一个宏定义，如<code>#define NULL 0</code>或<code>#define NULL ((void*)0)</code>。它的实际类型可能因编译器而异。</li><li><strong><code>nullptr</code></strong>：<code>nullptr</code>是C++11引入的一个新的关键字，它表示一个指向任何类型的空指针。<code>nullptr</code>的类型是<code>std::nullptr_t</code>，可以隐式转换为任何指针类型。</li></ul><h2 id="STL相关"><a class="header-anchor" href="#STL相关"></a>STL相关</h2><h3 id="STL容器一览"><a class="header-anchor" href="#STL容器一览"></a>STL容器一览</h3><table><thead><tr><th></th><th></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>容器</td><td>底层数据结构</td><td>时间复杂度</td><td>有无序</td><td>可不可重复</td><td>其他</td></tr><tr><td><a href="https://github.com/huihut/interview/tree/master/STL#array">array</a></td><td>数组</td><td>随机读改 O(1)</td><td>无序</td><td>可重复</td><td>支持随机访问</td></tr><tr><td><a href="https://github.com/huihut/interview/tree/master/STL#vector">vector</a></td><td>数组</td><td>随机读改、尾部插入、尾部删除 O(1) 头部插入、头部删除 O(n)</td><td>无序</td><td>可重复</td><td>支持随机访问</td></tr><tr><td><a href="https://github.com/huihut/interview/tree/master/STL#deque">deque</a></td><td>双端队列</td><td>头尾插入、头尾删除 O(1)</td><td>无序</td><td>可重复</td><td>一个中央控制器 + 多个缓冲区，支持首尾快速增删，支持随机访问</td></tr><tr><td><a href="https://github.com/huihut/interview/tree/master/STL#forward_list">forward_list</a></td><td>单向链表</td><td>插入、删除 O(1)</td><td>无序</td><td>可重复</td><td>不支持随机访问</td></tr><tr><td><a href="https://github.com/huihut/interview/tree/master/STL#list">list</a></td><td>双向链表</td><td>插入、删除 O(1)</td><td>无序</td><td>可重复</td><td>不支持随机访问</td></tr><tr><td><a href="https://github.com/huihut/interview/tree/master/STL#stack">stack</a></td><td>deque / list</td><td>顶部插入、顶部删除 O(1)</td><td>无序</td><td>可重复</td><td>deque 或 list 封闭头端开口，不用 vector 的原因应该是容量大小有限制，扩容耗时</td></tr><tr><td><a href="https://github.com/huihut/interview/tree/master/STL#queue">queue</a></td><td>deque / list</td><td>尾部插入、头部删除 O(1)</td><td>无序</td><td>可重复</td><td>deque 或 list 封闭头端开口，不用 vector 的原因应该是容量大小有限制，扩容耗时</td></tr><tr><td><a href="https://github.com/huihut/interview/tree/master/STL#priority_queue">priority_queue</a></td><td>vector + max-heap</td><td>插入、删除 O(log2n)</td><td>有序</td><td>可重复</td><td>vector容器+heap处理规则</td></tr><tr><td><a href="https://github.com/huihut/interview/tree/master/STL#set">set</a></td><td>红黑树</td><td>插入、删除、查找 O(log2n)</td><td>有序</td><td>不可重复</td><td></td></tr><tr><td><a href="https://github.com/huihut/interview/tree/master/STL#multiset">multiset</a></td><td>红黑树</td><td>插入、删除、查找 O(log2n)</td><td>有序</td><td>可重复</td><td></td></tr><tr><td><a href="https://github.com/huihut/interview/tree/master/STL#map">map</a></td><td>红黑树</td><td>插入、删除、查找 O(log2n)</td><td>有序</td><td>不可重复</td><td></td></tr><tr><td><a href="https://github.com/huihut/interview/tree/master/STL#multimap">multimap</a></td><td>红黑树</td><td>插入、删除、查找 O(log2n)</td><td>有序</td><td>可重复</td><td></td></tr><tr><td><a href="https://github.com/huihut/interview/tree/master/STL#unordered_set">unordered_set</a></td><td>哈希表</td><td>插入、删除、查找 O(1) 最差 O(n)</td><td>无序</td><td>不可重复</td><td></td></tr><tr><td><a href="https://github.com/huihut/interview/tree/master/STL#unordered_multiset">unordered_multiset</a></td><td>哈希表</td><td>插入、删除、查找 O(1) 最差 O(n)</td><td>无序</td><td>可重复</td><td></td></tr><tr><td><a href="https://github.com/huihut/interview/tree/master/STL#unordered_map">unordered_map</a></td><td>哈希表</td><td>插入、删除、查找 O(1) 最差 O(n)</td><td>无序</td><td>不可重复</td><td></td></tr><tr><td><a href="https://github.com/huihut/interview/tree/master/STL#unordered_multimap">unordered_multimap</a></td><td>哈希表</td><td>插入、删除、查找 O(1) 最差 O(n)</td><td>无序</td><td>可重复</td><td></td></tr></tbody></table><h3 id="STL算法复杂度一览"><a class="header-anchor" href="#STL算法复杂度一览"></a>STL算法复杂度一览</h3><table><thead><tr><th>算法</th><th>底层算法</th><th>时间复杂度</th><th>可不可重复</th></tr></thead><tbody><tr><td><a href="http://www.cplusplus.com/reference/algorithm/find/">find</a></td><td>顺序查找</td><td>O(n)</td><td>可重复</td></tr><tr><td><a href="https://github.com/gcc-mirror/gcc/blob/master/libstdc++-v3/include/bits/stl_algo.h#L4808">sort</a></td><td><a href="https://en.wikipedia.org/wiki/Introsort">内省排序</a></td><td>O(n*log2n)</td><td>可重复</td></tr></tbody></table><h3 id="STL迭代器一览"><a class="header-anchor" href="#STL迭代器一览"></a>STL迭代器一览</h3><table><thead><tr><th>容器</th><th>迭代器</th></tr></thead><tbody><tr><td>vector、deque</td><td>随机访问迭代器</td></tr><tr><td>stack、queue、priority_queue</td><td>无</td></tr><tr><td>list、(multi)set/map</td><td>双向迭代器</td></tr><tr><td>unordered_(multi)set/map、forward_list</td><td>前向迭代器</td></tr></tbody></table><h3 id="STL关系一览"><a class="header-anchor" href="#STL关系一览"></a>STL关系一览</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">STL:</span><br><span class="line">---序列式容器: string,vector,array,deque,list,forward_list</span><br><span class="line">---容器适配器: stack,queue,priority_queue</span><br><span class="line">---关联式容器: </span><br><span class="line">----红黑树结构：map,set,multimap,multiset</span><br><span class="line">----哈希结构：unordered_map,unordered_set,unordered_multimap,unordered_multiset</span><br><span class="line"></span><br><span class="line">vector:可变大小数组</span><br><span class="line">deque:双端队列</span><br><span class="line">list:双向链表</span><br><span class="line">forward_list:前向链表</span><br><span class="line">array:固定大小数组</span><br><span class="line">string:类似于vector但是专门保存字符</span><br><span class="line"></span><br><span class="line">map:关联数组：key-value pair 有序</span><br><span class="line">set：只保存关键字的容器：key is value 有序</span><br><span class="line">mutilmap：关键字可重复出现</span><br><span class="line">mutilset：关键字可重复出现</span><br><span class="line"></span><br><span class="line">unordered_map:hash函数组织map 无序</span><br><span class="line">unordered_set:hash函数组织set 无序</span><br><span class="line">unordered_mutilmap:hash函数组织map 无序 关键字可重复出现</span><br><span class="line">unordered_mutilset:hash函数组织set 无序 关键字可重复出现</span><br><span class="line">空间配置器</span><br><span class="line">|</span><br><span class="line">v</span><br><span class="line">*容器&lt;-------------------+</span><br><span class="line">         ||</span><br><span class="line">         v|</span><br><span class="line">      *迭代器  ----&gt; *算法---&gt;仿函数</span><br><span class="line">         ^          /^</span><br><span class="line">          \        /|</span><br><span class="line">           \      v|</span><br><span class="line">            适配器&lt;--------------+</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="STL高频问题-重点"><a class="header-anchor" href="#STL高频问题-重点"></a>STL高频问题[重点]</h3><h4 id="什么是STL"><a class="header-anchor" href="#什么是STL"></a><strong>什么是STL</strong></h4><p>STL是C++整个联邦的一个重要组成部分，它包含…6个部分，…</p><p>其中容器分为<strong>序列容器、关联容器、容器适配器</strong>（栈、队列）</p><p>重要容器：<strong>string/vector/list+map/sett/unordered_map/unordered_set</strong></p><h4 id="STL六大组件"><a class="header-anchor" href="#STL六大组件"></a><strong>STL六大组件</strong></h4><p>容器：数据结构，<strong>容器</strong>通过<strong>迭代器</strong>暴露其元素，使得<strong>算法</strong>可以操作这些元素</p><p>迭代器：访问容器的<strong>泛型指针</strong>，<strong>迭代器</strong>是一种设计模式，<strong>让用户通过特定的接口访问容器的数据，不需要了解容器内部的底层数据结构</strong></p><p>算法：数据操作方式</p><p>函数对象（仿函数）：函数对象是重载了函数调用操作符（<code>()</code>）的类实例。STL中的函数对象可以用作算法的某些操作，如定义比较行为（<code>less</code>，<code>greater</code>等），<strong>定义算法作用与容器的行为</strong>。</p><p>适配器：可以修改或扩展<strong>迭代器</strong>、<strong>容器</strong>和<strong>仿函数</strong>的行为，使其能够以新的方式被算法使用或操作</p><p>空间配置器：在更底层被容器使用来管理内存分配的，但它通常对于 STL 的使用者是透明的，除非需要自定义内存管理行为，内存池。<strong>【可以作为说是STL优化策略】</strong></p><p><strong>Q:why memory pool?</strong></p><p>**A:**如果将内存申请交给每个STL容器自己去申请管理，一是不安全容易内存泄漏二是频繁申请小块内存导致内存碎片，影响程序运行效率</p><p><strong>Q:内存池实现机制</strong></p><p><strong>A:</strong> allocate 包装 malloc，deallocate包装free</p><p><strong>Q:空间配置器是一级和二级的，为什么要二级空间配置器(1大1小)</strong></p><p>**A:**一级空间配置器对于大块内存非常有效，直接与内存管理机制交互减少额外开销，但是频繁分配和释放小块内存的场景，将会导致性能下降和内存碎片。所以引入二级空间配置器，底层原理是链表构成的内存</p><h4 id="STL各大容器"><a class="header-anchor" href="#STL各大容器"></a>STL各大容器</h4><h5 id="vector"><a class="header-anchor" href="#vector"></a>vector</h5><p><strong>动态增长数组</strong>，底层是类似于一个array，但是比array灵活，内部数据连续存储，是一种可以动态增长的序列容器，元素在内存连续存放，随机存取时间复杂度O(1)，尾端操作最佳性能，头部操作O(n)</p><ul><li><p>底层原理</p><p>类似于数组array，唯一差别是vector更加灵活，他的start和end迭代器分别指向所申请连续空间的首尾</p></li><li><p>增加元素时若超过自身最大容量，则扩充自身容量2倍（不同的编译器，vector有不同的扩容大小。在vs下是1.5倍，在GCC下是2倍）</p><p>扩充空间需要经过的步骤：重新配置空间，元素移动，释放旧的内存空间。一旦vector空间重新配置，则指向原来vector的所有迭代器都失效了，因为vector的地址改变了</p><p>Q：为什么加倍扩充</p><p>A：加倍扩容将会有更多的空余空间，不然假设我们一边扩一个一边加一个将导致不停的内存拷贝复制，时间复杂度本来是O(1)将会增长为O(n)</p><p>Q：扩容为啥1.5倍或2倍？</p><p>A：使用k=2增长因子的问题在于，每次扩展的新尺寸必然刚好大于之前分配的总和，也就是说，之前分配的内存空间不可能被使用。这样对内存不友好，最好把增长因子设为(1, 2)，也就是1-2之间的某个数值</p></li><li><p><strong>size、resize、reserve、capacity</strong></p><p>size：容器当前存储内容数量</p><p>resize：改变容器size</p><p>reserve：改变capacity</p><p>capacity：容器最大存储内容数量</p></li><li><p><strong>push_back和emplace_back</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;A&gt; v;</span><br><span class="line">A a;</span><br><span class="line">v.<span class="built_in">push_back</span>(a);\\ 拷贝复制到vec</span><br><span class="line">v.<span class="built_in">emplace_back</span>(); \\ 直接进入到vec</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; &amp;a &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &amp;v[<span class="number">0</span>] &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &amp;v[<span class="number">1</span>] &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="number">000000B</span>570AFFB24</span><br><span class="line"><span class="number">000002</span>A0CF71A400</span><br><span class="line"><span class="number">000002</span>A0CF71A401</span><br></pre></td></tr></table></figure></li><li><p>迭代器失效</p><p>resize、reserve、insert、assign、push_back等会引起其底层空间改变的操作，都有可能使迭代器失效</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt; vec_int = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span> &#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">std::vector&lt;<span class="type">int</span>&gt;::iterator it = vec_int.<span class="built_in">begin</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>( i == <span class="number">5</span>)</span><br><span class="line">vec_int.<span class="built_in">erase</span>(it);</span><br><span class="line">cout &lt;&lt; *it &lt;&lt; endl;<span class="comment">// Error: it is not valid iterator</span></span><br><span class="line">it++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; vec_int = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span> &#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">std::vector&lt;<span class="type">int</span>&gt;::iterator it = vec_int.<span class="built_in">begin</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (i == <span class="number">5</span>)</span><br><span class="line">&#123;</span><br><span class="line">it = vec_int.<span class="built_in">erase</span>(it);</span><br><span class="line">            <span class="comment">/// vec_int.erase(it);</span></span><br><span class="line">            <span class="comment">/// it++; ///error</span></span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; *it &lt;&lt; endl;</span><br><span class="line">it++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/// 1, 2, 3, 4, 5, 7, 8, 9, 10 </span></span><br></pre></td></tr></table></figure></li><li><p><strong>vector交换技巧释放空间</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">std::vector&lt;<span class="type">int</span>&gt; <span class="title">vec</span><span class="params">(<span class="number">100</span>)</span></span>; <span class="comment">// 假设有一个很大的vector</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Capacity before: &quot;</span> &lt;&lt; vec.<span class="built_in">capacity</span>() &lt;&lt; std::endl;</span><br><span class="line">    <span class="comment">// 清除元素</span></span><br><span class="line">    vec.<span class="built_in">clear</span>();</span><br><span class="line">    <span class="comment">// 请求释放内存（不保证成功）</span></span><br><span class="line">    vec.<span class="built_in">shrink_to_fit</span>();</span><br><span class="line">    <span class="comment">// 保证减小容量的方法：使用交换技巧</span></span><br><span class="line">    std::<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(vec).<span class="built_in">swap</span>(vec); <span class="comment">// 创建一个临时vector并与原vector交换</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Capacity after: &quot;</span> &lt;&lt; vec.<span class="built_in">capacity</span>() &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关键在于创建一个新的 <code>std::vector</code> 对象（在本例中是通过复制构造函数，但因为我们之前已经调用了 <code>clear</code>，所以它是空的），然后与原来的 <code>vec</code> 交换内容。由于新创建的 <code>vector</code> 是空的，这将有效地减少原 <code>vec</code> 的容量，释放多余的空间。在交换后，临时 <code>vector</code> 将被销毁，从而释放了原本 <code>vec</code> 占用的多余内存</p></li></ul><h5 id="list"><a class="header-anchor" href="#list"></a>list</h5><p>底层原理：list底层是一个<strong>双向链表</strong>（前闭后开），以结点为单位存储数据，节点地址在内存空间不一定连续，区别于vector，每次插入和删除就配置或释放一个空间。它还是一个环状双向链表，所以它只需要一个指针</p><h5 id="deque"><a class="header-anchor" href="#deque"></a>deque</h5><p><strong>双端队列</strong>， 用空间换了时间，支持首尾（中间不能）快速增删（与vector最大差异），也<strong>支持随机访问</strong></p><p><strong>优点：</strong></p><ol><li><strong>两端插入/删除操作高效</strong>：<code>std::deque</code> 允许在容器的前端和后端进行快速插入和删除操作，时间复杂度大约是 O(1)，这比 <code>std::vector</code> 的前端插入和删除效率要高得多。【这也是vector最大差异】</li><li><strong>随机访问</strong>：与 <code>std::vector</code> 类似，<code>std::deque</code> 也支持通过索引进行快速随机访问，访问时间复杂度为 O(1)</li></ol><p><strong>缺点：</strong></p><ol><li><strong>内存使用可能更高</strong>：由于 <code>std::deque</code> 的实现通常需要额外的中央控制结构来管理各个块，以及块内的间接寻址，这可能导致其比 <code>std::vector</code> 使用更多的内存。</li><li><strong>缓存利用率可能较低</strong>：虽然 <code>std::deque</code> 支持随机访问，但其元素可能分布在不连续的内存块中，这可能导致在遍历时缓存命中率低于 <code>std::vector</code>。</li><li><strong>某些操作可能较慢</strong>：虽然在两端的操作很快，但在 <code>std::deque</code> 的中间插入或删除元素仍然需要移动一部分元素，这可能比在 <code>std::vector</code> 中慢，尤其是当元素分布在多个内存块中时。</li></ol><h5 id="map"><a class="header-anchor" href="#map"></a>map</h5><p>底层实现为一个<strong>自平衡的二叉搜索树</strong>（红黑树，红黑树的旋转操作比AVL树少，红黑树的这种宽松平衡使其在<strong>插入和删除操作中相对更高效</strong>，因为它不需要像AVL树那样频繁地进行平衡调整，但是，这也意味着在最坏情况下，红黑树的查找操作可能会稍慢于AVL树，因为其<strong>树高可能稍高</strong>），意味着在对数时间复杂度内完成插入、查找和删除的操作，内部元素排列是有序的。</p><p>优点：有序，查找时间nlogn</p><p>缺点：空间占用率高</p><p>map插入方式有哪几种？</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mapStudent.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;<span class="type">int</span>, string&gt;(<span class="number">1</span>, <span class="string">&quot;student_one&quot;</span>)); </span><br><span class="line">mapStudent.<span class="built_in">insert</span>(map&lt;<span class="type">int</span>, string&gt;::<span class="built_in">value_type</span> (<span class="number">1</span>, <span class="string">&quot;student_one&quot;</span>));</span><br><span class="line">mapStudent.<span class="built_in">insert</span>(<span class="built_in">make_pair</span>(<span class="number">1</span>, <span class="string">&quot;student_one&quot;</span>)); </span><br><span class="line">mapStudent[<span class="number">1</span>] = <span class="string">&quot;student_one&quot;</span>; </span><br></pre></td></tr></table></figure><h5 id="set"><a class="header-anchor" href="#set"></a>set</h5><p>底层是一个基于红黑树实现，存储唯一的元素（不重复），按照特定的顺序进行排序的，关联容器。并且set仅存储单个值而非键值对，他的值就是键</p><p>Q:<strong>为什么map和set和插入删除效率比其他序列容器高，而且每次insert之后，以前保存的iterator不会失效</strong></p><p>A：**关于效率：**set和map是一种关联式容器，底层实现是红黑树实现的，他们的插入和删除效率高于其他容器是因为插入删除操作均是在节点进行操作，对红黑树节点的操作也只是指针操作，节点的存储内存不变。所以效率高，而vector往中间插入会涉及到对后序的内存中的元素复制再拷贝。</p><p><strong>关于迭代器失效：</strong> 在 <code>std::map</code> 和 <code>std::set</code> 中，插入和删除操作不会使指向其他元素的迭代器失效。这是因为这些操作只影响到特定的节点，并且由于红黑树的性质，树的其他部分保持有效。但需要注意，删除操作会使指向被删除元素的迭代器失效。相比之下，序列容器如 <code>std::vector</code> 在进行插入或删除操作时可能会导致所有指向插入或删除点之后元素的迭代器、指针和引用失效，因为这些操作可能涉及到元素的移动或内存重新分配</p><p>Q:<strong>map和set不能像vector一样有个reserve函数来预分配数据</strong></p><p>A:vector是一种序列式容器，底层实现是一个连续的内存空间，可以动态添加删除数据。而map&amp;set基于红黑树结构他们并不支持连续的内存布局，<strong>他们的底层设计和数据结构</strong>决定了它们不支持 <code>reserve</code> 功能，这是与它们存储元素和保持结构平衡方式密切相关的。</p><p>Q:<strong>红黑树</strong></p><p>A：二叉排序树，但是没有AVL树限制严格</p><ul><li>树中所有节点非红即黑。</li><li>根节点必为黑节点。</li><li>红节点的子节点必为黑（黑节点子节点可为黑）</li><li>从根到NULL的任何路径上黑结点数相同</li><li>O(<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mi>n</mi></mrow><annotation encoding="application/x-tex">log_2n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal">n</span></span></span></span>) 查询</li></ul><h5 id="unordered-map"><a class="header-anchor" href="#unordered-map"></a>unordered_map</h5><p>底层实现是一个哈希表 ，排列顺序是无序的,把关键码值映射到Hash表中一个位置来访问记录，查找时间复杂度可达O（1）</p><p>优点：查找时间更低</p><p>缺点：建立费时</p><h5 id="stack-queue"><a class="header-anchor" href="#stack-queue"></a>stack &amp; queue</h5><p>stack 与 queue 二者实现一般用list或者deque, 不用vector的原因是大小限制，扩容耗时。</p><h5 id="priority-queue"><a class="header-anchor" href="#priority-queue"></a>priority_queue</h5><p>priority_queue其实就是heap（堆）是完全二叉树</p><ul><li><code>std::priority_queue</code> 默认使用 <code>std::vector</code> 作为其底层容器，并使用 <code>std::less</code> 作为比较函数，这意味着最大的元素总是位于队列的前端。</li><li>它<strong>不提供遍历其元素的能力</strong>，因为 <code>std::priority_queue</code> 只允许访问最顶端的元素。</li><li>插入和删除操作（添加和移除队列中的元素）的时间复杂度大约是 O(log n)，这里的 n 是队列中元素的数量。</li></ul><h5 id="vector-vs-List"><a class="header-anchor" href="#vector-vs-List"></a>vector vs List</h5><p>这个对比类似于数组和链表的对比</p><p>std::vector</p><p><strong>优点</strong>：</p><ol><li><strong>快速随机访问</strong>：由于 <code>vector</code> 在内存中是连续线性空间存储的，它支持通过索引快速随机访问元素，访问时间复杂度为 O(1)。</li><li><strong>空间效率和缓存友好性</strong>：连续的内存布局使得 <code>vector</code> 在迭代访问时拥有较好的缓存一致性，通常可以提高遍历效率。</li><li><strong>末尾插入/删除高效</strong>：在 <code>vector</code> 的末尾添加或删除元素通常非常快速，时间复杂度为 O(1)，尽管当容器需要扩容时会涉及到复制或移动所有元素，但这通过分摊复杂度依然保持了较高效率。</li></ol><p><strong>缺点</strong>：</p><ol><li><strong>中间插入/删除低效</strong>：由于需要移动插入点之后的所有元素，所以在 <code>vector</code> 中间插入或删除元素的操作效率较低，时间复杂度为 O(n)。</li><li><strong>可能的内存重新分配</strong>：当超出当前容量时，需要重新分配内存并复制或移动所有元素，这可能导致较大的性能开销。【这里可以牵扯出频繁push_back导致性能影响】</li></ol><p>std::list</p><p><strong>优点</strong>：</p><ol><li><strong>中间插入/删除高效</strong>：<code>list</code> 是基于链表实现的，可以在任何位置快速插入或删除元素，只需要改变前后元素的指针即可，操作的时间复杂度为 O(1)。</li><li><strong>不需要连续内存</strong>：链表不需要一块连续的内存空间，这在某些情况下可能更加灵活和高效。</li></ol><p><strong>缺点</strong>：</p><ol><li><strong>不支持随机访问</strong>：<code>list</code> 不支持通过索引直接访问元素，访问任何一个元素都需要从头开始遍历，时间复杂度为 O(n)。</li><li><strong>内存使用更高</strong>：每个元素都需要额外的空间来存储前后元素的指针，相比于 <code>vector</code> 的紧凑存储，<code>list</code> 的内存使用效率较低。</li><li><strong>缓存利用率低</strong>：由于元素不是连续存储的，链表遍历时缓存命中率较低，可能导致较低的遍历效率。</li></ol><p><strong>vector和list增删元素</strong></p><p>对于vector而言，删除某个元素以后，该元素后边的每个元素的迭代器都会失效，后边每个元素都往前移动一位，erase返回下一个有效的迭代器。</p><p>对于list而言，删除某个元素，只有“指向被删除元素”的那个迭代器失效，其它迭代器不受任何影响</p><ol><li>vector插入、查找、删除时间复杂度分别为：O(n)、O(1)、O(n)；</li><li>list插入、查找、删除时间复杂度分别为：O(1)、O(n)、O(1)。</li></ol><p><strong>如何访问倒数第二个元素？</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt; s = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">list&lt;<span class="type">int</span>&gt; l = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出容器中的最后一个元素</span></span><br><span class="line">std::cout &lt;&lt; *(std::<span class="built_in">next</span>(s.<span class="built_in">rbegin</span>())) &lt;&lt; std::endl;</span><br></pre></td></tr></table></figure><p>运用好std::pre和std::next</p><h5 id="queue-vs-List-vs-deque"><a class="header-anchor" href="#queue-vs-List-vs-deque"></a>queue vs List vs deque</h5><p>queue是STL中的容器适配器，依赖底层序列容器通过一定的方法对容器的数据操作方式进行控制；List是STL中的序列容器，底层原理是双向链表实现，deque也是序列容器，双向开口的连续线性空间，但是它内部底层原理涉及到了map，因为他要将一定的内存块通过map连接起来，这样deque不但能实现双向队列基础上还能以O(1)进行随机访问（而vector不可以）</p><h5 id="map-vs-set"><a class="header-anchor" href="#map-vs-set"></a>map vs set</h5><p>map和set都是STL中的关联式容器，都是基于红黑树实现</p><p>map:</p><ul><li>map以RBTree作为底层容器</li><li>所有元素都是键+值存在</li><li>不允许键重复</li><li>所有元素是通过键进行自动排序的</li><li>map的键是不能修改的，但是其键对应的值是可以修改的</li></ul><p>set: read-only</p><ul><li><p>set以RBTree作为底层容器</p></li><li><p>所得元素的只有key没有value，value就是key</p></li><li><p>不允许出现键值重复</p></li><li><p>所有的元素都会被自动排序</p></li><li><p>不能通过迭代器来改变set的值，因为set的值就是键，set的迭代器是const的</p><blockquote><p>Q:为啥const?</p><p>因为 <code>std::set</code> 的迭代器是常量迭代器（<code>const_iterator</code>），这意味着您不能通过迭代器直接修改元素的值。这是设计上的选择，以确保集合中的元素始终保持正确排序且不重复，所以我们对set的值修改就是删除旧值再添加。</p><p>Q:set存储对象时根据什么作为键值</p><p>A：对象值作为键值，向<code>set</code>中插入对象时，这些对象会根据它们的值被比较。例如，如果你有一个自定义对象类型，并向<code>set</code>中添加这种类型的对象，你需要确保该类型支持比较操作（如通过重载<code>&lt;</code>操作符），这样<code>set</code>才能根据对象的值来进行排序和唯一性检查</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> value;</span><br><span class="line">    <span class="built_in">MyClass</span>(<span class="type">int</span> v) : <span class="built_in">value</span>(v) &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 重载&lt;操作符，以便set可以根据对象的value排序</span></span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> MyClass&amp; other) <span class="type">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> value &lt; other.value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::set&lt;MyClass&gt; mySet;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 向set中插入对象</span></span><br><span class="line">    mySet.<span class="built_in">insert</span>(<span class="built_in">MyClass</span>(<span class="number">10</span>));</span><br><span class="line">    mySet.<span class="built_in">insert</span>(<span class="built_in">MyClass</span>(<span class="number">20</span>));</span><br><span class="line">    mySet.<span class="built_in">insert</span>(<span class="built_in">MyClass</span>(<span class="number">10</span>)); <span class="comment">// 这个插入操作不会成功，因为值10已经存在</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出set的大小，预期是2，因为有两个唯一的值</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Set size: &quot;</span> &lt;&lt; mySet.<span class="built_in">size</span>() &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="map-set-vs-multimap-multiset"><a class="header-anchor" href="#map-set-vs-multimap-multiset"></a>map | set vs multimap | multiset</h5><p>唯一区别就是：multimap调用的是红黑树的insert_equal(),可以重复插入而map调用的则是独一无二的插入insert_unique()，multiset和set也一样，底层实现都是一样的，只是在插入的时候调用的方法不一样</p><h5 id="vector-vs-map-in-index-key-or-index"><a class="header-anchor" href="#vector-vs-map-in-index-key-or-index"></a>vector vs map in index [key or index]</h5><p>关于越界访问查找，通过下标访问vector中的元素时会做边界检查，但该处的实现方式要看具体IDE，不同IDE的实现方式不一样，确保不可访问越界地址</p><p>map的下标运算符[]的作用是：将key作为下标去执行查找，并返回相应的值；如果不存在这个key，就将一个具有该key和value的值插入这个map</p><p><strong>map中[ ]与find的区别</strong></p><ul><li>map的下标运算符[ ]的作用是：将关键码作为下标去执行查找，并返回对应的值；如果不存在这个关键码，就将一个具有该关键码和值类型的默认值的项插入这个map。</li><li>map的find函数：用关键码执行查找，找到了返回该位置的迭代器；如果不存在这个关键码，就返回尾迭代器。</li></ul><h5 id="hash-map-vs-map"><a class="header-anchor" href="#hash-map-vs-map"></a>hash_map vs map</h5><p>hash_map被C++11标准化为unordered_map, 二者底层实现不一样，hash_map底层实现是hash_table，而map 底层实现是红黑树，前者查找时间是O(1)，后者O(n)</p><p>Q：hash_table底层机制？</p><p>A：开链法构造</p><h5 id="迭代器-it-vs-it"><a class="header-anchor" href="#迭代器-it-vs-it"></a>迭代器 it++ vs ++it</h5><p><code>++it</code>（前缀递增）</p><ul><li><strong>行为</strong>：首先增加迭代器的值（即，让迭代器指向下一个元素），然后返回增加后的迭代器的引用。</li><li><strong>性能</strong>：通常推荐使用前缀递增，因为它不需要创建迭代器的临时副本。在迭代器或者对象本身较大时，使用前缀递增可以避免不必要的复制，从而提高效率。</li></ul><p><code>it++</code>（后缀递增）</p><ul><li><strong>行为</strong>：首先创建当前迭代器的一个副本，然后增加原迭代器的值（让原迭代器指向下一个元素），最后返回副本。这意味着返回的是增加之前的迭代器的值。</li><li><strong>性能</strong>：后缀递增需要创建迭代器的一个临时副本，这可能导致额外的性能开销，尤其是对于那些复制成本较高的迭代器（如某些容器的迭代器）。</li></ul><h4 id="STL容器删除元素"><a class="header-anchor" href="#STL容器删除元素"></a>STL容器删除元素</h4><p>我们在刚才提到，我们用迭代器删除元素将会导致某些种类容器结构变化，进而导致我们后续的容器失效</p><ol><li>对于序列容器vector，deque来说，使用erase后，后边的每个元素的迭代器都会失效，后边每个元素都往前移动一位，erase返回下一个有效的迭代器；</li><li>对于关联容器map，set来说，使用了erase后，当前元素的迭代器失效，但是其结构是红黑树，删除当前元素，不会影响下一个元素的迭代器，所以在调用erase之前，记录下一个元素的迭代器即可；</li><li>对于list来说，它使用了不连续分配的内存，并且它的erase方法也会返回下一个有效的迭代器，因此上面两种方法都可以使用</li></ol><p>顺序容器用迭代器删除一个元素和关联容器用迭代器删除一个元素？</p><p>顺序容器：It = c.erase(it); 因为顺序容器删除元素将导致后续迭代器失效，所以要更新it，不能c.erase(it++)</p><p>关联容器：c.erase(it++); erase迭代器只是被删除元素的迭代器失效,所以c.erase(it++)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">set&lt;<span class="type">int</span>&gt; s = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> it = s.<span class="built_in">begin</span>(); it != s.<span class="built_in">end</span>(); it++) &#123;</span><br><span class="line"><span class="keyword">if</span> (*it == <span class="number">3</span>) &#123;</span><br><span class="line"><span class="comment">// ok, erase will return the next element&#x27;s iterator</span></span><br><span class="line"><span class="comment">// it++ is valid</span></span><br><span class="line"><span class="comment">// map is a related container, so it++ is valid</span></span><br><span class="line">s.<span class="built_in">erase</span>(it++);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> it = s.<span class="built_in">begin</span>(); it != s.<span class="built_in">end</span>(); it++) &#123;</span><br><span class="line">cout &lt;&lt; *it &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; v = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> it = v.<span class="built_in">begin</span>(); it != v.<span class="built_in">end</span>(); it++) &#123;</span><br><span class="line"><span class="keyword">if</span> (*it == <span class="number">3</span>) &#123;</span><br><span class="line"><span class="comment">// v.erase(it++); </span></span><br><span class="line"><span class="comment">// ERROR because it++ is invalid, vector is a series container, </span></span><br><span class="line"><span class="comment">// if erase an element, next element will be moved to the previous position, so it++ is invalid</span></span><br><span class="line"></span><br><span class="line">it = v.<span class="built_in">erase</span>(it);</span><br><span class="line"><span class="comment">// ok, erase will return the next element&#x27;s iterator</span></span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> it = v.<span class="built_in">begin</span>(); it != v.<span class="built_in">end</span>(); it++) &#123;</span><br><span class="line">cout &lt;&lt; *it &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="STL中迭代器失效"><a class="header-anchor" href="#STL中迭代器失效"></a>STL中迭代器失效</h4><ul><li>vector &amp; deque</li></ul><ol><li><p>尾部插入</p><p>插入后size&lt;capacity，首迭代器不失效尾迭代失效；size == capacity时，所有迭代器均失效</p></li><li><p>尾部以外插入</p><p>插入后size &lt; capacity，首迭代器不失效但插入元素之后所有迭代器失效，size == capacity时，所有迭代器均失效</p></li></ol><ul><li><p>list/map/set</p><p>仅当前迭代器失效，不会影响其他节点的迭代器, 使用递增方法获取下一个迭代器</p></li></ul><h4 id="STL-hash-table解决冲突办法"><a class="header-anchor" href="#STL-hash-table解决冲突办法"></a>STL hash_table解决冲突办法</h4><p><strong>线性探测</strong></p><p>使用hash函数计算出的位置如果已经有元素占用了，则向后依次寻找，找到表尾则回到表头，直到找到一个空位</p><p><strong>开链</strong></p><p>每个表格维护一个list，如果hash函数计算出的格子相同，则按顺序存在这个list中</p><p><strong>再散列</strong></p><p>发生冲突时使用另一种hash函数再计算一个地址，直到不冲突</p><h2 id="综合-📚"><a class="header-anchor" href="#综合-📚"></a>综合 📚</h2><h3 id="CPP编译步骤"><a class="header-anchor" href="#CPP编译步骤"></a>CPP编译步骤*</h3><p>**预处理阶段：**在这个阶段，预处理器处理源文件中的预处理指令，比如 <code>#include</code>、<code>#define</code> 等。预处理器会根据这些指令展开头文件并替换宏定义，生成一个经过预处理的源文件  .ii</p><p>**编译阶段：**编译器将预处理后的源文件转换成汇编代码。在这个阶段，编译器会对源文件进行词法分析、语法分析和语义分析，<strong>并生成相应的中间代码或汇编代码 .s</strong></p><p><strong>汇编阶段：<strong>汇编器将汇编代码转换成机器码或者目标文件。在这个阶段，汇编器会将汇编代码转换成</strong>可重定位的机器码，并生成目标文件 .o</strong></p><p><strong>链接阶段：<strong>链接器将</strong>目标文件和库文件链接</strong>在一起，生成最终的可执行文件。在这个阶段，链接器会解析目标文件之间的引用关系，将它们连接到正确的位置上，<strong>并将库文件中的函数和变量链接到可执行文件中</strong>，.out</p><h3 id="变量存储区域-内存管理机制"><a class="header-anchor" href="#变量存储区域-内存管理机制"></a>变量存储区域*(内存管理机制)</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">|Text| low address //代码区</span><br><span class="line">|---------------|</span><br><span class="line">|  data|  // 这里又分为全局数据区和常量区</span><br><span class="line">|  segment|</span><br><span class="line">|---------------|</span><br><span class="line">|HEAP|  // new delete 作用区域</span><br><span class="line">|---------------|</span><br><span class="line">|   空闲 | // 不等价于heap</span><br><span class="line">|   内存 |</span><br><span class="line">|---------------|</span><br><span class="line">|stack| high address </span><br></pre></td></tr></table></figure><p><strong>代码段</strong>：有时也称为文本段。它包含可执行指令（机器代码）。代码段通常是只读的，即<strong>程序代码区</strong></p><p><strong>数据段</strong>：数据段分为两部分：</p><ul><li><p><strong>初始化数据段</strong>：所有全局、静态static和常量数据都存储在数据段中，即**静态存储区 **.data</p></li><li><p><strong>未初始化数据段</strong>：所有未初始化的全局变量和静态变量都存储在该段中，也称为<strong>BSS段</strong>  .bss</p></li></ul><p><strong>堆段</strong>：当程序在运行时使用calloc和malloc函数分配内存时，内存在堆中分配，向高地址增长<br><strong>栈段</strong>：栈用于存储局部变量、函数参数和其他与函数相关的信息，向低地址增长</p><p>堆栈存储：</p><ul><li><strong><code>A a;</code></strong>：在栈（Stack）上分配内存。栈是一种自动管理内存的区域，变量在定义所在的作用域结束时会自动销毁。</li><li><strong><code>A *a = new A();</code></strong>：在堆（Heap）上分配内存。堆用于动态内存分配，通过<code>new</code>操作符分配的内存必须显式地通过<code>delete</code>操作符释放，否则会导致内存泄漏</li></ul><h3 id="纯虚函数与抽象类"><a class="header-anchor" href="#纯虚函数与抽象类"></a>纯虚函数与抽象类</h3><p>纯虚函数（也称为抽象函数）是一个在基类中声明但不定义的虚函数，用来指定派生类必须提供该函数的实现。纯虚函数的声明以<code>= 0</code>结尾，这个语法表明函数没有实现体。含有纯虚函数的类称为抽象基类，抽象基类不能被实例化</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">show</span><span class="params">()</span> </span>= <span class="number">0</span>; <span class="comment">// 纯虚函数</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Derived</span> : <span class="keyword">public</span> Base &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123; <span class="comment">// 实现基类中的纯虚函数</span></span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Derived show function&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="虚函数"><a class="header-anchor" href="#虚函数"></a>虚函数*</h3><ol><li><strong>虚函数（Virtual Functions）</strong></li></ol><ul><li><strong>定义与目的</strong>：通过在函数声明前添加<code>virtual</code>关键字来定义虚函数。虚函数允许派生类重写（override）基类中的成员函数，<strong>实现运行时多态</strong>。</li><li><strong>运行时多态</strong>：虚函数的调用是在运行时决定的，而非编译时。这意味着当通过基类指针或引用调用一个虚函数时，将执行对象实际类型的函数版本。</li><li>**存储在内存的什么区：**存储在代码段，而非静态区</li></ul><ol start="2"><li><strong>纯虚函数（Pure Virtual Functions）</strong></li></ol><ul><li><strong>定义</strong>：纯虚函数是一种没有实现的虚函数，通过在函数声明的结尾处添加<code>= 0</code>来指定。</li><li><strong>抽象基类</strong>：包含至少一个纯虚函数的类称为抽象基类。抽象基类不能实例化对象。</li></ul><ol start="3"><li><strong>虚析构函数（Virtual Destructors）</strong></li></ol><ul><li><strong>目的</strong>：确保通过基类指针删除派生类对象时能够调用正确的析构函数，从而避免资源泄漏。</li><li><strong>实现</strong>：将基类的析构函数声明为虚函数。</li></ul><ol start="4"><li><strong>虚表（Virtual Table，vtable）</strong></li></ol><ul><li><strong>作用</strong>：存储类的虚函数地址的数组。每个拥有虚函数的类都有一个对应的虚表。</li><li><strong>虚指针（vptr）</strong>：类的每个实例都包含一个指向其虚表的指针，即虚指针</li><li>**存储在内存的什么区：**虚函数表是全局共享的，仅一个，类似于类中静态成员变量.静态成员变量也是全局共享，大小确定，因此最有可能存在全局数据区,linux存放在可执行文件的只读数据段中(rodata)，微软的编译器将虚函数表存放在常量段</li></ul><ol start="5"><li><strong>虚继承（Virtual Inheritance）</strong></li></ol><ul><li><strong>解决问题</strong>：用于解决多重继承中的菱形继承问题（钻石问题），避免基类被多次继承导致的成员重复。</li><li><strong>实现</strong>：通过在继承时使用<code>virtual</code>关键字（如<code>class Derived : virtual public Base</code>）来声明虚继承。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 基类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">speak</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Animal speaks&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 虚继承</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Mammal</span> : <span class="keyword">virtual</span> <span class="keyword">public</span> Animal &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Mammal runs&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 虚继承</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Bird</span> : <span class="keyword">virtual</span> <span class="keyword">public</span> Animal &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">fly</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Bird flies&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 多重继承，同时继承自 Mammal 和 Bird</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Bat</span> : <span class="keyword">public</span> Mammal, <span class="keyword">public</span> Bird &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">swoop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Bat swoops&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Bat bat;</span><br><span class="line">    bat.<span class="built_in">speak</span>(); <span class="comment">// 调用来自 Animal 的虚函数</span></span><br><span class="line">    bat.<span class="built_in">run</span>();   <span class="comment">// 调用来自 Mammal</span></span><br><span class="line">    bat.<span class="built_in">fly</span>();   <span class="comment">// 调用来自 Bird</span></span><br><span class="line">    bat.<span class="built_in">swoop</span>(); <span class="comment">// 调用来自 Bat</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="virtual搭配"><a class="header-anchor" href="#virtual搭配"></a>virtual搭配*</h3><p>虚函数实现C++多态的必要基础</p><h4 id="静态函数可以声明为虚函数吗"><a class="header-anchor" href="#静态函数可以声明为虚函数吗"></a><strong>静态函数可以声明为虚函数吗</strong></h4><p>不行，静态函数都不用类实例就能访问,而虚函数是我们的虚指针访问虚表中虚函数入口来访问虚函数本身</p><h4 id="构造函数可以为虚函数吗"><a class="header-anchor" href="#构造函数可以为虚函数吗"></a><strong>构造函数可以为虚函数吗</strong></h4><p>不可以，尽管<strong>虚函数表vtable是在编译阶段就已经建立</strong>的，但指向<strong>虚函数表的指针vptr是在运行阶段实例化对象时才产生</strong>的。 如果类含有虚函数，编译器会在构造函数中添加代码来创建vptr。这里就变成逻辑闭环了，一个先有鸡（对象）还是先有蛋（vptr）问题【effective c++: 绝不在构造和析构过程中调用虚函数】</p><blockquote><p>当一个虚函数被调用时,它通过虚表(vtable)来解析,而虚表是在对象构造期间初始化的。如果构造函数是虚函数,就会导致一个悖论:<strong>虚表还没有初始化,编译器就需要使用它来调用构造函数</strong>;</p><p>编译[生成虚表]-&gt;类实例化对象[对象构造函数中初始化虚表，填入虚函数地址入口]-&gt;对象后续进行虚函数调用</p><p><em>'鸡和蛋相互依赖:鸡来自蛋,而蛋又是由鸡生的。这导致了一个看似无法解决的循环因果关系,同样,在构造函数和虚函数的情况下,也存在一种循环依赖:</em></p><ol><li><em>为了调用虚函数,对象需要访问其虚表。</em></li><li><em>但是,虚表是在构造函数执行期间初始化的。</em></li><li><em>如果构造函数本身是一个虚函数,那么在调用构造函数之前,就需要访问尚未初始化的虚表。</em></li></ol><p><em>这就产生了一个类似于&quot;先有鸡还是先有蛋&quot;的悖论:为了调用构造函数(虚函数),需要虚表;但为了初始化虚表,需要先调用构造函数’</em></p></blockquote><p>对象的虚指针（指向虚表的指针）设置通常是在<strong>构造函数开始执行的早期阶段进行</strong>的，这是为了确保即使在<strong>构造过程中，对象的虚函数调用也能正确解析到当前构造阶段对应类的实现</strong>。这意味着，虚指针和虚表的设置发生在对象的构造过程中，而不是在构造函数完成后。</p><blockquote><p>假设有三个类，<code>Base</code>，<code>Derived1</code>继承自<code>Base</code>，以及<code>Derived2</code>继承自<code>Derived1</code>。每个类都有其虚函数和相应的虚表。</p><ol><li>构造<code>Derived2</code>对象时的过程：<ul><li>当<code>Derived2</code>的构造函数被调用时，它首先会调用<code>Derived1</code>的构造函数。</li><li>在<code>Derived1</code>的构造函数执行之前，<code>Base</code>的构造函数会被自动调用。</li><li><strong>在<code>Base</code>构造函数执行的早期阶段</strong>，对象的虚指针被设置为指向<code>Base</code>的虚表。这确保了即使在<code>Base</code>构造函数内部，任何虚函数调用都能正确地解析到<code>Base</code>类的实现。</li><li>然后，控制权回到<code>Derived1</code>的构造函数，在它开始执行的早期，对象的虚指针更新为指向<code>Derived1</code>的虚表。</li><li>同样地，当<code>Derived2</code>的构造函数开始执行时，对象的虚指针最终被更新为指向<code>Derived2</code>的虚表。</li><li>当<code>Derived2</code>的构造函数执行完毕，整个对象被完全构造完成，此时虚指针指向<code>Derived2</code>的虚表，确保任何对虚函数的调用都会解析到<code>Derived2</code>或它正确的基类实现。</li></ul></li></ol></blockquote><p><strong>因此，虚指针的设置和更新发生在每个构造阶段的开始，确保了即使在构造过程中发生虚函数调用，也能够调用到正确版本的函数。这也意味着虚指针和虚表的“生成”（或更准确地说，虚指针的设置）是在构造对象的过程中逐步完成的，而不是在整个对象构造完成后</strong>。</p><h4 id="析构函数可以为虚函数吗"><a class="header-anchor" href="#析构函数可以为虚函数吗"></a><strong>析构函数可以为虚函数吗</strong>*</h4><p>可以，而且如果你的类是基类，将基类的析构函数声明为虚函数是非常重要且推荐的做法。这是面向对象设计中的一个关键原则，特别是当涉及到多态和继承时。</p><blockquote><p>有一个指向派生类对象的基类指针，并且通过这个基类指针删除对象时，如果基类的析构函数不是虚的，那么只有基类的析构函数会被调用，导致派生类部分可能不会被正确清理，从而造成资源泄漏或其他问题。这是因为在这种情况下，编译器无法确定要调用哪个析构函数，因为它只依据指针的静态类型来做决定。</p></blockquote><h4 id="构造函数和析构函数可以调用虚函数吗"><a class="header-anchor" href="#构造函数和析构函数可以调用虚函数吗"></a><strong>构造函数和析构函数可以调用虚函数吗</strong></h4><p>语法上讲可以，但不推荐这种做法</p><ul><li><p>父类对象会在子类之前进行构造，此时子类部分的数据成员还未初始化，因此调用子类的虚函数时不安全的，故而C++不会进行动态联编</p></li><li><p>析构函数是用来销毁一个对象的，在销毁一个对象时，先调用子类的析构函数，然后再调用基类的析构函数</p></li></ul><blockquote><p>《Effective C++》的解释是： 派生类对象构造期间进入基类的构造函数时，对象类型变成了基类类型，而不是派生类类型。 同样，进入基类析构函数时，对象也是基类类型。</p><ul><li>在构造函数中调用虚函数,调用的是当前正在构造的类的版本,而不是最终的重写版本。</li><li>在析构函数中调用虚函数,调用的是当前正在析构的类的版本,而不是原始的基类版本</li></ul></blockquote><table><thead><tr><th>不可以为虚函数的函数</th></tr></thead><tbody><tr><td>构造函数</td></tr><tr><td>内联函数</td></tr><tr><td>静态函数</td></tr><tr><td>友元函数</td></tr></tbody></table><p>静态函数：因为不属于对象属于类，静态成员函数没有this指针</p><p>友元函数：因为友元函数不属于类的成员函数，不能被继承，不会进入虚表</p><h3 id="Vptr-与-Vtable"><a class="header-anchor" href="#Vptr-与-Vtable"></a>Vptr 与 Vtable*</h3><p>vptr和vtable是实现c++的多态特征的底层机制。</p><ul><li><p>虚表 vtable <strong>虚表与类关系是1:1 虚表与实例是1:m</strong></p><p><strong>定义</strong>：虚表是一个包含指向类的虚函数地址的数组。<strong>每个</strong>有虚函数的类或包含虚函数的类的派生类都有一个为它生成的虚表</p><p><strong>作用</strong>：当调用对象的虚函数时，编译器会使用虚表来决定需要调用的实际函数。这允许在运行时进行函数的动态绑定，是实现多态的关键。<strong>在编译时就构造完成</strong></p></li><li><p>虚指针 vptr</p><p><strong>定义</strong>：虚指针是一个指针，每个使用虚函数的对象都会持有一个指向相应虚表的虚指针。</p><p><strong>作用</strong>：虚指针使得对象能够在运行时通过虚表找到正确的虚函数实现。当对象的虚函数被调用时，编译器通过对象的虚指针访问虚表，从而找到对应的函数实现进行调用。<strong>在构造函数执行时会对虚表指针进行初始化</strong></p></li><li><p>工作原理</p><p><strong>初始化</strong>：当一个对象被创建时，编译器会自动在对象的内存布局中添加一个虚指针（vptr），并将其初始化为指向该类的虚表。</p><blockquote><p>在构造函数中创建虚表并对虚表初始化。在构造子类对象时，会先调用父类的构造函数，此时，编译器只“看到了”父类，并为父类对象初始化虚表指针，令它指向父类的虚表；当调用子类的构造函数时，为子类对象初始化虚表指针，令它指向子类的虚表</p><p>即导致一种情况：覆盖</p><p>当派生类对基类的虚函数没有重写时，派生类的虚表指针指向的是基类的虚表；当派生类对基类的虚函数重写时，派生类的虚表指针指向的是自身的虚表；当派生类中有自己的虚函数时，在自己的虚表中将此虚函数地址添加在后面</p></blockquote><p><strong>继承与多态</strong>：如果一个类被继承，派生类会有它自己的虚表（如果它覆盖了基类的虚函数或添加了新的虚函数）。当通过基类指针或引用调用虚函数时，运行时会查找对象实际类型的虚表，从而调用正确的函数实现。</p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::string;</span><br><span class="line"><span class="keyword">using</span> std::vector;</span><br><span class="line"><span class="keyword">using</span> std::unordered_map;</span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">sum</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;::sum()&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">        std::cout &lt;&lt; a + b &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> : <span class="keyword">public</span> A &#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    A a;</span><br><span class="line">    <span class="type">void</span>* objPtr = &amp;a; <span class="comment">// 获取对象实例的地址</span></span><br><span class="line">    <span class="comment">// 根据C++对象模型，对象的第一个成员是指向虚表的指针</span></span><br><span class="line">    <span class="type">void</span>** vTablePtr = *(<span class="type">void</span>***)objPtr;</span><br><span class="line">    <span class="comment">// 获取虚表中第一个函数的地址</span></span><br><span class="line">    <span class="built_in">void</span> (*funcPtra)(A*, <span class="type">int</span>, <span class="type">int</span>) = (<span class="built_in">void</span> (*)(A*, <span class="type">int</span>, <span class="type">int</span>))vTablePtr[<span class="number">0</span>];</span><br><span class="line">    <span class="comment">// 调用这个函数，传递参数</span></span><br><span class="line">    <span class="built_in">funcPtra</span>(&amp;a, <span class="number">5</span>, <span class="number">3</span>);</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    B b;</span><br><span class="line">    objPtr = &amp;b;</span><br><span class="line">    vTablePtr = *(<span class="type">void</span>***)objPtr;</span><br><span class="line">    <span class="built_in">void</span> (*funcPtrb)(B*, <span class="type">int</span>, <span class="type">int</span>) = (<span class="built_in">void</span> (*)(B*, <span class="type">int</span>, <span class="type">int</span>))vTablePtr[<span class="number">0</span>];</span><br><span class="line">    <span class="built_in">funcPtrb</span>(&amp;b, <span class="number">5</span>, <span class="number">3</span>);</span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">    B another_b;</span><br><span class="line">    objPtr = &amp;another_b;</span><br><span class="line">vTablePtr = *(<span class="type">void</span>***)objPtr;</span><br><span class="line">    <span class="built_in">void</span> (*funcPtrAnotherB)(B*, <span class="type">int</span>, <span class="type">int</span>) = (<span class="built_in">void</span> (*)(B*, <span class="type">int</span>, <span class="type">int</span>))vTablePtr[<span class="number">0</span>];</span><br><span class="line">    <span class="built_in">funcPtrAnotherB</span>(&amp;another_b, <span class="number">5</span>, <span class="number">3</span>);</span><br><span class="line">    </span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;A sum address&quot;</span> &lt;&lt; funcPtra &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;B sum address&quot;</span> &lt;&lt; funcPtrb &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Another B sum address&quot;</span> &lt;&lt; funcPtrAnotherB &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;A vtable address: &quot;</span>&lt;&lt;*(<span class="type">void</span>***)&amp;a&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;B vtable address: &quot;</span>&lt;&lt;*(<span class="type">void</span>***)&amp;b&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;Another B vtable address: &quot;</span>&lt;&lt;*(<span class="type">void</span>***)&amp;another_b&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">::<span class="built_in">sum</span>()</span><br><span class="line"><span class="number">8</span></span><br><span class="line">::<span class="built_in">sum</span>()</span><br><span class="line"><span class="number">8</span></span><br><span class="line">::<span class="built_in">sum</span>()</span><br><span class="line"><span class="number">8</span></span><br><span class="line">A sum address00007FF754421555</span><br><span class="line">B sum address00007FF754421555</span><br><span class="line">Another B sum address00007FF754421555</span><br><span class="line">    </span><br><span class="line">A vtable address: <span class="number">00007F</span>F75442BC18</span><br><span class="line">B vtable address: <span class="number">00007F</span>F75442BC38</span><br><span class="line">Another B vtable address: <span class="number">00007F</span>F75442BC38</span><br></pre></td></tr></table></figure><p>Q:解释下中间那一坨</p><p>A：这里其实不必深究，简单讲解一下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span>** vTablePtr = *(<span class="type">void</span>***)objPtr;</span><br></pre></td></tr></table></figure><p><code>objPtr</code>：这是指向对象的指针。我们假设这是一个指向类实例的指针</p><p><code>(void***)objPtr</code>：这里发生了类型转换。我们首先将<code>objPtr</code>转换为<code>void***</code>。在C++中，<code>void*</code>是一个通用指针类型，可以指向任何类型的数据。这里的<code>void***</code>表示一个指向指针的指针的指针，这里具体指的是指向虚表指针的指针</p><p><code>*(void***)objPtr</code>：通过解引用操作（*），我们得到了对象的第一个成员，即虚表指针。在大多数情况下，虚表指针是对象布局中的第一个成员</p><p><code>void** vTablePtr</code>：最后，我们得到了虚表指针，并将其存储在<code>vTablePtr</code>中。<code>void**</code>表示指向指针的指针，这里具体指的是指向虚表的指针</p><blockquote><p>在标准C++中没有直接支持这种操作，这是一种与实现相关的技术，可能在不同的编译器或不同的编译器版本中行为不同。在实际的C++编程中，直接操作虚表通常是不推荐的。</p></blockquote><p>Q:为什么此时B继承了A输出的函数地址是一样的呢?</p><p>A:当<code>B</code>继承自<code>A</code>且没有覆盖<code>A</code>中的虚函数<code>sum</code>时，<code>B</code>的虚表会复用<code>A</code>中相应的虚函数入口。这就意味着，即便是<code>B</code>的实例，其虚表中指向<code>sum</code>函数的指针也会是指向<code>A::sum</code>的。这是因为<code>B</code>没有提供一个自己的<code>sum</code>实现来“覆盖”或者说“重写”基类<code>A</code>中的那个，所以继承了<code>A</code>的实现。</p><p>C++的虚表（vtable）机制是用于支持运行时多态的。每个包含虚函数的类都有一个虚表，虚表中存储了指向类的虚函数的指针。当类<code>B</code>继承自类<code>A</code>而不覆盖（重写）其虚函数时，<code>B</code>的虚表会包含指向<code>A</code>的虚函数实现的指针，因此你会看到相同的函数地址。</p><p>这个机制确保了，即使通过基类的指针或引用调用虚函数，也总是会执行到对象实际类型的那个版本，从而实现多态。由于<code>B</code>并没有提供一个新的<code>sum</code>实现，所以它就继承了<code>A</code>的实现，包括使用相同的函数地址</p><p>修改以上B类代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">sum</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;A::sum()&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">        std::cout &lt;&lt; a + b &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> : <span class="keyword">public</span> A &#123;</span><br><span class="line">    <span class="comment">// 添加 override</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">sum</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;B::sum()&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">        std::cout &lt;&lt; a + b &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    A a;</span><br><span class="line">    <span class="type">void</span>* objPtr = &amp;a; <span class="comment">// 获取对象实例的地址</span></span><br><span class="line">    <span class="comment">// 根据C++对象模型，对象的第一个成员是指向虚表的指针</span></span><br><span class="line">    <span class="type">void</span>** vTablePtr = *(<span class="type">void</span>***)objPtr;</span><br><span class="line">    <span class="comment">// 获取虚表中第一个函数的地址</span></span><br><span class="line">    <span class="built_in">void</span> (*funcPtra)(A*, <span class="type">int</span>, <span class="type">int</span>) = (<span class="built_in">void</span> (*)(A*, <span class="type">int</span>, <span class="type">int</span>))vTablePtr[<span class="number">0</span>];</span><br><span class="line">    <span class="comment">// 调用这个函数，传递参数</span></span><br><span class="line">    <span class="built_in">funcPtra</span>(&amp;a, <span class="number">5</span>, <span class="number">3</span>);</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    B b;</span><br><span class="line">    objPtr = &amp;b;</span><br><span class="line">    vTablePtr = *(<span class="type">void</span>***)objPtr;</span><br><span class="line">    <span class="built_in">void</span> (*funcPtrb)(B*, <span class="type">int</span>, <span class="type">int</span>) = (<span class="built_in">void</span> (*)(B*, <span class="type">int</span>, <span class="type">int</span>))vTablePtr[<span class="number">0</span>];</span><br><span class="line">    <span class="built_in">funcPtrb</span>(&amp;b, <span class="number">5</span>, <span class="number">3</span>);</span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">    B another_b;</span><br><span class="line">    objPtr = &amp;another_b;</span><br><span class="line">vTablePtr = *(<span class="type">void</span>***)objPtr;</span><br><span class="line">    <span class="built_in">void</span> (*funcPtrAnotherB)(B*, <span class="type">int</span>, <span class="type">int</span>) = (<span class="built_in">void</span> (*)(B*, <span class="type">int</span>, <span class="type">int</span>))vTablePtr[<span class="number">0</span>];</span><br><span class="line">    <span class="built_in">funcPtrAnotherB</span>(&amp;another_b, <span class="number">5</span>, <span class="number">3</span>);</span><br><span class="line">    </span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;A sum address&quot;</span> &lt;&lt; funcPtra &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;B sum address&quot;</span> &lt;&lt; funcPtrb &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Another B sum address&quot;</span> &lt;&lt; funcPtrAnotherB &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;A vtable address: &quot;</span>&lt;&lt;*(<span class="type">void</span>***)&amp;a&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;B vtable address: &quot;</span>&lt;&lt;*(<span class="type">void</span>***)&amp;b&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;Another B vtable address: &quot;</span>&lt;&lt;*(<span class="type">void</span>***)&amp;another_b&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">A::<span class="built_in">sum</span>()</span><br><span class="line"><span class="number">8</span></span><br><span class="line">B::<span class="built_in">sum</span>()</span><br><span class="line"><span class="number">8</span></span><br><span class="line">B::<span class="built_in">sum</span>()</span><br><span class="line"><span class="number">8</span></span><br><span class="line">A sum address00007FF6CC381555</span><br><span class="line">B sum address00007FF6CC38155F</span><br><span class="line">Another B sum address00007FF6CC38155F</span><br><span class="line">A vtable address: <span class="number">00007F</span>F6CC38BC18</span><br><span class="line">B vtable address: <span class="number">00007F</span>F6CC38BC38</span><br><span class="line">Another B vtable address: <span class="number">00007F</span>F6CC38BC38</span><br></pre></td></tr></table></figure><p>Q:1和2对sum函数修改都有相同效果，所以二者相同吗？</p><p>当派生类提供一个与基类虚函数签名完全相同的成员函数时，不论是否显式地使用<code>virtual</code>关键字，该成员函数都会被视为覆盖了基类的虚函数，实现多态行为</p><p>A：<strong>使用<code>virtual</code>关键字</strong>：在派生类中重写基类的虚函数时，即使不用<code>virtual</code>关键字，函数依然是虚的，并且覆盖了基类的虚函数。但在早期的C++代码中，显式地使用<code>virtual</code>可以增加代码的可读性，表明这个函数是虚函数，意图是覆盖基类的虚函数。</p><p><strong>使用<code>override</code>关键字</strong>：C++11引入了<code>override</code>关键字，其目的是明确指示编译器这个函数是用来覆盖基类中的一个虚函数的。如果标记了<code>override</code>但没有实际覆盖任何基类中的虚函数（比如因为函数签名不匹配），编译器会报错。这个机制提供了一个额外的安全检查，有助于捕获潜在的错误。因此，使用<code>override</code>可以增强代码的健壮性和可维护性。</p><p><strong>Q:Vptr和Vtable是什么时候创建</strong>？</p><p>A:<strong>虚表是在编译阶段为每个含有虚函数的类生成的，而虚指针在类的对象实例化过程中，具体是在构造函数执行过程中初始化，并指向相应的虚表</strong></p><p>虚表和虚指针创建和初始化的过程，涉及到类的实例化：</p><p><strong>编译阶段：</strong>  编译器在编译阶段识别出哪些类含有虚函数，并为这些类生成虚表。虚表中存储了虚函数的地址。如果类有继承，并且子类覆盖了基类的虚函数，子类的虚表中会用子类函数的地址替换相应的基类函数地址。<br><strong>构造函数执行阶段：</strong>  当创建一个类的对象时，该对象的构造函数会被调用。在构造函数的执行过程中，对象的虚指针（vptr）被初始化，指向其对应类的虚表。<br>如果有继承关系，每个构造函数（从基类到派生类）在其执行过程中都可能更新vptr以指向正确的虚表，以反映当前构造阶段对象的动态类型。<br><strong>构造函数完成后：</strong>  一旦对象的构造函数（包括所有基类和派生类的构造函数，如果有继承的话）执行完成，对象的vptr将最终指向最派生类的虚表。此时，对象已经完全构建好，可以正常使用虚函数了。</p><p><strong>Q：你上面那个不太好理解，换个说法</strong></p><p>A:</p><p>虚指针 (vptr)</p><ul><li><strong>创建和初始化时机</strong>：每个含有虚函数的类的对象都会有一个虚指针。这个虚指针是在对象创建时自动被编译器添加到对象中的。对于类的每个实例，虚指针在对象的构造函数中被初始化。</li><li><strong>指向</strong>：虚指针指向相应的虚表。</li></ul><p>虚表 (vtable)</p><ul><li><strong>创建时机</strong>：虚表是在编译时期创建的。对于每一个含有虚函数的类，编译器会生成一个虚表。虚表是类的一个静态属性，因此对于该类的所有实例来说，<strong>虚表是共享的</strong>。</li><li><strong>初始化时机</strong>：虚表在编译期间就已经被初始化了。编译器会将类中所有的虚函数地址填入虚表中。这意味着，当程序编译完成后，每个含有虚函数的类对应的虚表中已经填充了所有虚函数的地址。</li><li><strong>填入虚函数地址</strong>：虚函数的地址是在编译器编译时期填入虚表的。这个过程发生在程序编译阶段，而不是运行时或者类的初始化时期。</li></ul><p><strong>Q:vtable和vptr和类和实例</strong></p><p>A:我们上面的实验可以看出，对于同一个类的所有实例，它们共享同一个虚表（vtable）。虚表是每个类的一份，而不是每个对象一份。虚表中包含了该类的所有虚函数地址。每个对象有自己的虚指针（vptr），这个虚指针指向它们共同的虚表。这意味着，如果你输出同一个类的两个不同实例的虚指针值，这两个值是相同的，因为它们都指向同一个虚表。</p><ol><li><strong>节省内存</strong>：如果每个对象都有自己的虚表，将会非常占用内存。共享虚表可以大大减少内存使用。</li><li><strong>提高效率</strong>：因为虚表是共享的，所以在对象间调用虚函数时不需要额外的查找或是切换虚表，可以直接通过虚指针访问到虚表，然后调用相应的函数。</li><li><strong>支持多态</strong>：通过虚指针和虚表的机制，C++实现了运行时多态。即使在基类指针或引用指向派生类对象时，也能通过虚指针找到正确的虚表，进而调用正确版本的虚函数。</li></ol><p>**NOTE:**请仔细观察以下地址区别</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">没有覆写版本</span><br><span class="line">A sum address00007FF754421555</span><br><span class="line">B sum address00007FF754421555</span><br><span class="line">Another B sum address00007FF754421555</span><br><span class="line">    </span><br><span class="line">A vtable address: <span class="number">00007F</span>F75442BC18</span><br><span class="line">B vtable address: <span class="number">00007F</span>F75442BC38</span><br><span class="line">Another B vtable address: <span class="number">00007F</span>F75442BC38</span><br><span class="line"></span><br><span class="line">被覆写的版本</span><br><span class="line">A sum address00007FF6CC381555</span><br><span class="line">B sum address00007FF6CC38155F</span><br><span class="line">Another B sum address00007FF6CC38155F</span><br><span class="line">    </span><br><span class="line">A vtable address: <span class="number">00007F</span>F6CC38BC18</span><br><span class="line">B vtable address: <span class="number">00007F</span>F6CC38BC38</span><br><span class="line">Another B vtable address: <span class="number">00007F</span>F6CC38BC38</span><br></pre></td></tr></table></figure><h3 id="C-的继承"><a class="header-anchor" href="#C-的继承"></a>C++的继承</h3><ol><li><p><strong>公有继承（Public Inheritance）</strong>：</p><p>公有继承意味着基类的<strong>公有成员和保护成员</strong>在派生类中<strong>保持其原有的访问属性</strong>。<strong>基类的私有成员在派生类中仍然是私有的</strong>，<strong>但派生类无法直接访问它们</strong>。这是最常用的继承类型，用于实现“是一个（is-a）”关系。</p></li><li><p><strong>保护继承（Protected Inheritance）</strong>：</p><p>保护继承意味着基类的<strong>公有成员和保护成员</strong>在派生类中<strong>变为保护成员</strong>。这允许派生类的成员和派生类的派生类访问这些成员，但其他任何类都不能。这种继承方式比较少见。</p></li><li><p><strong>私有继承（Private Inheritance）</strong>：</p><p>私有继承意味着基类的<strong>公有成员和保护成员</strong>在派生类中<strong>变为私有成员</strong>。这意味着这些成员只能被派生类自己的成员函数和友元函数访问。私有继承并不表明“是一个（is-a）”关系，而是表明“有一个（has-a）”关系或者是一种实现细节的继承。</p></li><li><p><strong>菱形继承与虚继承</strong></p><p>当两个类继承自同一个基类，并且另一个类再从这两个类继承时，最顶层的基类会被继承多次，导致资源浪费和访问歧义</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">    A</span><br><span class="line">   / \</span><br><span class="line">  B   C</span><br><span class="line">   \ /</span><br><span class="line">    D</span><br><span class="line">    </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> value;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> : <span class="keyword">virtual</span> <span class="keyword">public</span> A &#123; <span class="comment">/* ... */</span> &#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span> : <span class="keyword">virtual</span> <span class="keyword">public</span> A &#123; <span class="comment">/* ... */</span> &#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">D</span> : <span class="keyword">public</span> B, <span class="keyword">public</span> C &#123; <span class="comment">/* ... */</span> &#125;;</span><br></pre></td></tr></table></figure><p>虚继承通过引入虚基类来解决菱形继承问题。在虚继承中，无论基类被继承了多少次，派生类中只会包含一个基类的实例</p><p><strong>虚继承工作原理:</strong></p><ul><li><strong>虚基类表（vbase table）</strong>：编译器会为使用虚继承的类构建一个虚基类表。这个表用于存储虚基类相对于派生类对象的偏移量。</li><li><strong>初始化虚基类</strong>：虚基类的构造函数由最开始的派生类调用，确保虚基类只被初始化一次。</li><li>但是引入了额外性能开销,因为要引入虚基类表</li></ul></li></ol><h3 id="构造与析构问题一览"><a class="header-anchor" href="#构造与析构问题一览"></a>构造与析构问题一览*</h3><h4 id="构造函数析构函数的执行顺序"><a class="header-anchor" href="#构造函数析构函数的执行顺序"></a>构造函数析构函数的执行顺序</h4><p>构造：基类构造函数-&gt;成员对象的构造函数-&gt;派生类构造函数</p><p>析构：派生类构造函数&lt;-成员对象的构造函数&lt;-基类构造函数</p><p>如果有多个成员类对象则构造函数的调用顺序是对象在类中被声明的顺序，而不是它们出现在成员初始化表中的顺序</p><h4 id="构造函数析构函数可否抛出异常"><a class="header-anchor" href="#构造函数析构函数可否抛出异常"></a>构造函数析构函数可否抛出异常</h4><p>**构造函数：**当构造函数抛出异常时，对象被认为是没有成功构造的。如果在构造期间抛出异常，C++运行时系统会自动调用已经成功构造的成员对象和基类的析构函数来清理资源，然后将异常传播给上一级的异常处理程序。如果你在构造函数中使用资源（如动态分配内存、文件句柄、锁等），并且在构造过程中抛出异常，你必须确保到目前为止已经构造的部分能够被正确地清理，以避免资源泄漏</p><p>**析构函数：**析构函数抛出异常是非常危险的，通常应该避免。如果析构函数抛出异常，并且没有在析构函数内部捕获它，这可能导致程序的不正常终止，因为析构函数通常在对象生命周期结束时被自动调用，包括在处理其他异常时。如果在处理一个异常的过程中，一个析构函数抛出了另一个异常（这被称为异常嵌套），C++标准规定，程序将调用<code>std::terminate()</code>，导致程序立即终止.</p><h4 id="构造函数种类"><a class="header-anchor" href="#构造函数种类"></a>构造函数种类</h4><table><thead><tr><th></th><th>解释</th><th style="text-align:left">备注</th></tr></thead><tbody><tr><td>普通构造函数</td><td>默认构造函数和初始化构造函数在定义类的对象的时候，完成对象的初始化工作</td><td style="text-align:left"></td></tr><tr><td>拷贝构造函数</td><td>复制构造函数用于复制本类的对象，拷贝构造函数在用一个对象初始化另一个新对象时被调用</td><td style="text-align:left">默认实现是浅拷贝而非深拷贝</td></tr><tr><td>转换构造函数</td><td>转换构造函数用于将其他类型的变量，隐式转换为本类对象</td><td style="text-align:left"></td></tr><tr><td>移动构造函数</td><td>特殊的构造函数，用于在对象之间转移资源的所有权，而不是复制资源</td><td style="text-align:left"></td></tr></tbody></table><p>赋值运算符在将一个已存在的对象赋值给另一个已存在的对象时被调用</p><ul><li>如果用户没有定义这些函数，则编译器会隐式声明一个构造函数</li><li>在编译器需要的情况下（如带有虚函数，虚拟继承等等），会隐式定义函数，这时函数为非平凡的(no-trivial)；否则则编译器不会添加代码来定义一个函数，这时的函数为平凡的（trivial）</li></ul><h4 id="普通构造函数"><a class="header-anchor" href="#普通构造函数"></a>普通构造函数</h4><h4 id="移动构造函数"><a class="header-anchor" href="#移动构造函数"></a>移动构造函数</h4><p>C++11 引入的一种特殊的构造函数，用于在对象之间<strong>转移资源的所有权，而不是复制资源</strong>。它通常用于优化那些包含动态分配资源（如指针）的对象的移动操作，以避免不必要的复制和资源分配</p><p>移动构造函数的特点：</p><ol><li>它接受一个右值引用（rvalue reference）作为参数，表示要从中移动资源的对象。</li><li>它将源对象的资源转移到新创建的对象，而不是复制资源。</li><li>在转移资源后，它将源对象的状态设置为有效的默认状态，但不分配任何新的资源</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span>* data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">MyClass</span>(<span class="type">int</span> size) &#123;</span><br><span class="line">        data = <span class="keyword">new</span> <span class="type">int</span>[size];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 移动构造函数</span></span><br><span class="line">    <span class="built_in">MyClass</span>(MyClass&amp;&amp; other) <span class="keyword">noexcept</span> &#123;</span><br><span class="line">        <span class="comment">// 转移资源的所有权</span></span><br><span class="line">        data = other.data;        </span><br><span class="line">        <span class="comment">// 将源对象设置为默认状态</span></span><br><span class="line">        other.data = <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">MyClass</span>() &#123;</span><br><span class="line">        <span class="keyword">delete</span>[] data;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>需要注意的是，<strong>移动构造函数不应该抛出异常，因此通常被标记为 <code>noexcept</code>。此外，只有在源对象是一个右值（rvalue）时，移动构造函数才会被调用。对于左值（lvalue），仍然会调用常规的拷贝构造函数</strong></p><h4 id="拷贝构造函数"><a class="header-anchor" href="#拷贝构造函数"></a>拷贝构造函数</h4><p>语法：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">A</span>(<span class="type">const</span> A&amp; t)&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>常见的使用场景（详情参考后续问题：什么时候合成拷贝构造函数）：</p><p>1.以一个对象初始化另一个对象</p><p>2.函数参数的对象传递</p><p>3.作为参数的返回值（无移动构造函数）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span>&#123;......&#125;;</span><br><span class="line">MyClass a;</span><br><span class="line">MyClass b = a; <span class="comment">// 1.对象初始化</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">fun</span>(b); <span class="comment">// 2.将对象b作为参数传入fun</span></span><br><span class="line"></span><br><span class="line"><span class="function">MyClass <span class="title">fun</span><span class="params">()</span></span>&#123; </span><br><span class="line"> MyClass b; </span><br><span class="line"> <span class="keyword">return</span> b; <span class="comment">//3.返回</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="深拷贝浅拷贝"><a class="header-anchor" href="#深拷贝浅拷贝"></a>深拷贝浅拷贝</h4><p><strong>浅拷贝(Shallow Copy)</strong></p><p>浅拷贝是指在创建新对象时,简单地将源对象的非静态数据成员的值复制到新对象中,而不复制指针所指向的动态分配的内存区域。换句话说,源对象和新对象共享相同的动态分配的内存区域。</p><p>浅拷贝可能会导致以下问题:</p><ol><li><strong>资源重复释放</strong>: 当源对象和新对象被销毁时,它们都会尝试释放相同的动态分配的内存区域,从而导致程序崩溃或未定义行为。</li><li><strong>资源泄漏</strong>: 如果只销毁了源对象或新对象中的一个,而另一个对象仍然存在,则动态分配的内存区域将无法被释放,从而导致资源泄漏</li></ol><p><strong>深拷贝(Deep Copy)</strong></p><p>深拷贝是指在创建新对象时,不仅复制源对象的非静态数据成员的值,还为指针类型的数据成员分配新的动态内存区域,并将源对象中指针指向的数据复制到新分配的内存区域中。这样,源对象和新对象就拥有独立的动态分配的内存区域。</p><p>深拷贝可以避免浅拷贝可能导致的资源重复释放和资源泄漏问题,但是它需要更多的内存和复制开销</p><p><strong>Q:拷贝构造函数拷贝是深拷贝还是浅拷贝?</strong></p><p>A:拷贝构造函数默认执行的是浅拷贝（shallow copy），但你可以显式地定义它来执行深拷贝(deep copy)</p><h4 id="什么时候合成构造函数"><a class="header-anchor" href="#什么时候合成构造函数"></a>什么时候合成构造函数</h4><p>没有任何构造函数，但他含有一个成员对象，该成员对象含有默认构造函数</p><p>没有任何构造函数的类派生自一个带有默认构造函数的基类</p><p>带有虚函数的类</p><p>含有虚基类</p><h4 id="什么时候合成拷贝构造函数"><a class="header-anchor" href="#什么时候合成拷贝构造函数"></a>什么时候合成拷贝构造函数</h4><p>被当做参数交给某个函数</p><p>如果返回的对象是一个函数参数或类的成员变量，而不是局部对象，则会调用拷贝构造函数</p><p>没有拷贝构造函数，但是含有一个类类型的成员变量，该类型含有拷贝构造函数</p><p>没有拷贝构造函数，但是该类继承自含有拷贝构造函数的基类</p><p>带有虚函数的类</p><p>含有虚基类</p><p><strong>注意：返回一个局部对象，编译器会优先调用移动构造函数来创建返回值，而不是拷贝构造函数</strong></p><h4 id="为什么拷贝构造函数必须传引用不能传值"><a class="header-anchor" href="#为什么拷贝构造函数必须传引用不能传值"></a>为什么拷贝构造函数必须传引用不能传值</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">MyClass</span>() &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line">    <span class="built_in">MyClass</span>(MyClass obj) &#123; <span class="comment">/* ... */</span> &#125; <span class="comment">//错误的定义方法</span></span><br><span class="line">&#125;;</span><br><span class="line">MyClass obj1;</span><br><span class="line"><span class="function">MyClass <span class="title">obj2</span><span class="params">(obj1)</span></span>;  <span class="comment">// 调用拷贝构造函数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">MyClass</span>() &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line">    <span class="built_in">MyClass</span>(<span class="type">const</span> MyClass&amp; obj) &#123; <span class="comment">/* ... */</span> &#125; <span class="comment">//正确的定义方法</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这里发生的事情是:</p><ol><li><code>obj1</code> 被创建。</li><li>为了创建 <code>obj2</code>,拷贝构造函数 <code>MyClass(MyClass obj)</code> 被调用。</li><li>但是,为了将 <code>obj1</code> 作为参数传递给拷贝构造函数,<code>obj1</code> 需要被复制,因为参数是按值传递的。</li><li>为了复制 <code>obj1</code>,拷贝构造函数 <code>MyClass(MyClass obj)</code> 需要被调用。</li><li>为了将 <code>obj1</code> 作为参数传递给这个新的拷贝构造函数调用,<code>obj1</code> 需要再次被复制。</li><li>这个过程会无限地重复下去,导致无限递归和栈溢出。</li></ol><p>为了避免这个问题,拷贝构造函数应该接受一个对象的引用作为参数，这是 C++ 语言的一个基本规则和惯用法（这个问题很类似于在析构函数里用delete this）</p><h3 id="模板问题"><a class="header-anchor" href="#模板问题"></a>模板问题</h3><h4 id="模板原理"><a class="header-anchor" href="#模板原理"></a>模板原理</h4><p>模板的底层实现机制称为<strong>模板实例化</strong>。模板本身不是直接编译成机器代码的，而是在编译器遇到模板使用时（例如，通过指定模板参数来创建对象或调用函数），根据模板参数进行实例化。【两次编译】</p><ul><li><strong>函数模板实例化</strong>：当你使用特定类型调用一个函数模板时，编译器会生成一个该类型的特定版本的函数。如果你用相同的类型参数再次调用该函数模板，编译器通常会重用之前生成的实例。这意味着对于每一种类型的函数调用，编译器都可能生成一个专门的函数实例。</li><li><strong>类模板实例化</strong>：类模板的实例化过程与函数模板类似。当你声明一个类模板的实例（即对象）时，需要为模板参数提供具体的类型。编译器随后为这些具体类型生成一个特定的类定义。每个不同的参数化类型都会生成一个新的类实例。</li></ul><h4 id="模板类和模板函数的区别"><a class="header-anchor" href="#模板类和模板函数的区别"></a>模板类和模板函数的区别</h4><p>函数模板的实例化是由编译程序在处理函数调用时自动完成的，而类模板的实例化必须由程序员在程序中显式地指定。</p><p>即函数模板允许隐式调用和显式调用而类模板只能显示调用。在使用时类模板必须加<T>，而函数模板不必。</p><h4 id="模板的声明和实现通常写在哪"><a class="header-anchor" href="#模板的声明和实现通常写在哪"></a>模板的声明和实现通常写在哪</h4><p>通常都放在头文件中，这是因为模板需要在编译时实例化。如果编译器在处理模板使用（即实例化）的文件时看不到模板定义，它就无法生成模板实例的代码。将模板的声明和定义分离到不同的文件中会导致链接错误，因为编译器在实例化模板时找不到模板定义。</p><h3 id="引用与指针"><a class="header-anchor" href="#引用与指针"></a>引用与指针</h3><h4 id="左右值引用"><a class="header-anchor" href="#左右值引用"></a>左右值引用</h4><ul><li><strong>左值</strong>：指的是表达式结束后依然存在的对象。左值可以出现在赋值表达式的左侧。例如，变量、对数组元素的引用、解引用指针、返回引用的函数调用都是左值。</li><li><strong>右值</strong>：通常指的是表达式结束就不再存在的临时对象。右值不能出现在赋值表达式的左侧。字面量（除了字符串字面量外）、返回非引用的函数调用、算术表达式的结果都是右值。</li></ul><p><strong>左值引用（常规）</strong></p><p><strong>右值引用（new）</strong></p><p>涉及大量资源管理和对象传递的场合。通过<strong>减少不必要的对象复制</strong>, 解决传统左值引用的一些限制，并支持移动语义。右值引用使用 <code>&amp;&amp;</code> 符号表示，用于绑定到临时对象（右值）或已经失效的对象，通常用于实现移动构造函数和移动赋值运算符，以提高对象的性能和效率,<code>T&amp;&amp;</code></p><p>右值引用的主要优点包括：</p><ol><li><p>支持移动语义：右值引用允许将资源（如动态分配的内存）从一个对象移动到另一个对象，而不是传统的复制，从而提高性能和效率。</p><blockquote><p>允许对象“窃取”另一个对象的资源而不是拷贝它们</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">std::vector&lt;<span class="type">int</span>&gt; v = std::<span class="built_in">move</span>(otherVector);</span><br></pre></td></tr></table></figure><p><code>std::move</code>将<code>otherVector</code>转换为一个右值引用，这允许<code>v</code>的构造函数接管<code>otherVector</code>的内部数据，而不是复制它们。<code>otherVector</code>在操作后变为处于有效但不可预测的状态，并且应该不再使用</p></li><li><p>可用于完美转发：右值引用可以用于实现完美转发，即在函数模板中将参数以原始形式传递给其他函数，保留参数的值类别（左值或右值）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">wrapper</span><span class="params">(T&amp;&amp; arg)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 将arg完美转发给另一个函数</span></span><br><span class="line">    <span class="built_in">otherFunction</span>(std::forward&lt;T&gt;(arg));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>示例:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;utility&gt;</span> <span class="comment">// for std::move</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyObject</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">MyObject</span>() &#123; std::cout &lt;&lt; <span class="string">&quot;Default constructor\n&quot;</span>; &#125;</span><br><span class="line">    <span class="built_in">MyObject</span>(<span class="type">const</span> MyObject&amp;) &#123; std::cout &lt;&lt; <span class="string">&quot;Copy constructor\n&quot;</span>; &#125;</span><br><span class="line">    <span class="built_in">MyObject</span>(MyObject&amp;&amp;) <span class="keyword">noexcept</span> &#123; std::cout &lt;&lt; <span class="string">&quot;Move constructor\n&quot;</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接受右值引用参数的函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">processObject</span><span class="params">(MyObject&amp;&amp; obj)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// process the object</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    MyObject obj1; <span class="comment">// 调用默认构造函数</span></span><br><span class="line">    <span class="function">MyObject <span class="title">obj2</span><span class="params">(obj1)</span></span>; <span class="comment">// 调用拷贝构造函数</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建临时对象，并传递给 processObject 函数</span></span><br><span class="line">    <span class="built_in">processObject</span>(<span class="built_in">MyObject</span>());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用 std::move 将左值转换为右值</span></span><br><span class="line">    <span class="built_in">processObject</span>(std::<span class="built_in">move</span>(obj1));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>MyObject</code> 类有一个移动构造函数，当创建临时对象并将其传递给 <code>processObject</code> 函数时，会调用移动构造函数。同时，通过使用 <code>std::move</code> 将左值 <code>obj1</code> 转换为右值后，也会调用移动构造函数</p><h4 id="传递参数时引用和指针的选择"><a class="header-anchor" href="#传递参数时引用和指针的选择"></a>传递参数时引用和指针的选择</h4><p>需要返回函数内局部变量的内存的时候用指针，使用指针传参需开辟内存</p><p>对栈空间大小比较敏感（比如递归）的时候使用引用</p><p>类对象作为参数传递的时候使用引用</p><h4 id="智能指针"><a class="header-anchor" href="#智能指针"></a>智能指针</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//std::unique_ptr</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//std::shared_ptr </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//std::weak_ptr</span></span><br></pre></td></tr></table></figure><p><strong><code>std::unique_ptr</code></strong>：是一种独占所有权的智能指针，意味着同一时间内只能有一个<code>unique_ptr</code>指向给定资源。当<code>unique_ptr</code>离开作用域时，它指向的对象会被自动销毁。这种智能指针不允许复制，确保了资源的独占性，但它允许移动，使得资源的所有权可以转移</p><p><strong><code>std::shared_ptr</code></strong>：是一种共享所有权的智能指针，允许多个<code>shared_ptr</code>实例指向同一个对象。内部使用引用计数机制来跟踪有多少个<code>shared_ptr</code>共享同一个资源。当最后一个指向对象的<code>shared_ptr</code>被销毁时，对象会被自动删除。<code>shared_ptr</code>适用于需要通过多个指针访问同一资源的情况</p><p><strong><code>std::weak_ptr</code></strong>：是一种不拥有对象的智能指针，它设计用来解决<code>shared_ptr</code>间的循环引用问题。<code>weak_ptr</code>指向<code>shared_ptr</code>管理的对象，但不增加引用计数。因此，<code>weak_ptr</code>不会阻止其指向的对象被销毁。通常，<code>weak_ptr</code>用于临时访问<code>shared_ptr</code>管理的对象，而不希望对对象的生命周期产生影响</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::unique_ptr&lt;<span class="type">int</span>&gt; ptr = std::<span class="built_in">make_unique</span>&lt;<span class="type">int</span>&gt;(<span class="number">10</span>);</span><br><span class="line">    std::cout &lt;&lt; *ptr &lt;&lt; std::endl; <span class="comment">// 输出: 10</span></span><br><span class="line">    <span class="comment">// ptr会在这里自动释放内存</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::shared_ptr&lt;<span class="type">int</span>&gt; ptr1 = std::<span class="built_in">make_shared</span>&lt;<span class="type">int</span>&gt;(<span class="number">10</span>);</span><br><span class="line">    std::shared_ptr&lt;<span class="type">int</span>&gt; ptr2 = ptr1; <span class="comment">// ptr2现在与ptr1共享所有权</span></span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; *ptr1 &lt;&lt; std::endl; <span class="comment">// 输出: 10</span></span><br><span class="line">    std::cout &lt;&lt; ptr1.<span class="built_in">use_count</span>() &lt;&lt; std::endl; <span class="comment">// 输出: 2，因为有两个shared_ptr指向同一个对象</span></span><br><span class="line">    <span class="comment">// ptr1和ptr2会在这里自动释放内存</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::shared_ptr&lt;<span class="type">int</span>&gt; sharedPtr = std::<span class="built_in">make_shared</span>&lt;<span class="type">int</span>&gt;(<span class="number">10</span>);</span><br><span class="line">    std::weak_ptr&lt;<span class="type">int</span>&gt; weakPtr = sharedPtr;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">auto</span> tempSharedPtr = weakPtr.<span class="built_in">lock</span>()) &#123; <span class="comment">// 尝试获取一个shared_ptr</span></span><br><span class="line">        std::cout &lt;&lt; *tempSharedPtr &lt;&lt; std::endl; <span class="comment">// 输出: 10</span></span><br><span class="line">        <span class="comment">// tempSharedPtr会在这里自动释放内存</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;对象已被销毁&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>循环引用</strong>：指两个或多个对象相互持有对方的强引用（如 <code>shared_ptr</code>），导致这些对象的引用计数永远不会降为零，从而造成内存泄漏。<code>a</code> 和 <code>b</code> 就形成了循环引用。当 <code>a</code> 和 <code>b</code> 离开作用域时，它们的引用计数都是 2，因为它们分别被对方持有一次引用。结果是，<code>a</code> 和 <code>b</code> 的引用计数永远不会降到 0，它们占用的内存就无法被释放，导致内存泄漏</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 智能指针的循环引用 导致内存泄漏</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    std::shared_ptr&lt;B&gt; b_ptr;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    std::shared_ptr&lt;A&gt; a_ptr;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">std::shared_ptr&lt;A&gt; a = std::<span class="built_in">make_shared</span>&lt;A&gt;();</span><br><span class="line">std::shared_ptr&lt;B&gt; b = std::<span class="built_in">make_shared</span>&lt;B&gt;();</span><br><span class="line">a-&gt;b_ptr = b;</span><br><span class="line">b-&gt;a_ptr = a;</span><br></pre></td></tr></table></figure><p><strong>拷贝</strong></p><p>当使用一个智能指针来初始化另一个智能指针时,会调用智能指针的拷贝构造函数。不同的智能指针类型,其拷贝构造行为也不尽相同:</p><ul><li><code>std::unique_ptr</code>: 由于<code>unique_ptr</code>是独占所有权的,不允许拷贝构造,只能进行移动构造。</li><li><code>std::shared_ptr</code>: 拷贝构造会使新的<code>shared_ptr</code>与原<code>shared_ptr</code>共享同一个控制块,从而共享对象的所有权。引用计数会加1。</li><li><code>std::weak_ptr</code>: 拷贝构造不会影响引用计数,新旧<code>weak_ptr</code>指向同一个控制块。</li></ul><p><strong>赋值</strong></p><p>对智能指针进行赋值操作时,行为也因类型而异:</p><ul><li><code>std::unique_ptr</code>: 不允许普通的赋值操作,只能通过移动赋值转移所有权。</li><li><code>std::shared_ptr</code>: 赋值后,两个<code>shared_ptr</code>共享同一个控制块,引用计数会加1。</li><li><code>std::weak_ptr</code>: 赋值不会影响引用计数</li></ul><h4 id="auto-ptr"><a class="header-anchor" href="#auto-ptr"></a>auto_ptr</h4><p>C++98 引入的一种智能指针,可以自动管理动态分配（使用 <code>new</code>）的对象的生命周期，以避免内存泄漏,当 <code>std::auto_ptr</code> 的实例离开作用域时，它会自动删除所管理的对象. 由于缺陷建议被3大智能指针替代</p><p><code>std::auto_ptr</code> 的主要问题:</p><ol><li><strong>所有权转移</strong>：<code>std::auto_ptr</code> 在进行拷贝或赋值时，会发生所有权的转移。这意味着原 <code>std::auto_ptr</code> 会失去对对象的所有权（变为 <code>nullptr</code>），而新的 <code>std::auto_ptr</code> 获得所有权。这种行为很容易导致意外的所有权转移，造成资源管理上的困惑。</li><li><strong>容器兼容性</strong>：由于所有权转移的行为，<code>std::auto_ptr</code> 不能安全地用于标准容器（如 <code>std::vector</code>、<code>std::list</code> 等）。尝试存储 <code>std::auto_ptr</code> 的拷贝在容器中会导致未定义行为，因为容器操作经常需要元素的复制和赋值。</li><li><strong>多线程问题</strong>：<code>std::auto_ptr</code> 没有考虑到多线程环境中的安全性问题。其设计不包含对并发访问的保护，这在多线程程序中可能会导致数据竞争和其他同步问题。</li></ol><h4 id="野指针-vs-悬空指针"><a class="header-anchor" href="#野指针-vs-悬空指针"></a>野指针 vs 悬空指针</h4><p>野指针（Wild Pointer）</p><p>野指针是指未初始化的指针。其指向的内存地址是不确定的，因为它没有被明确初始化为NULL或指向有效的内存地址。使用野指针的结果是不可预测的，因为它可能指向任何内存地址，包括系统保留的内存。尝试访问或操作野指针所指向的内存通常会导致不可预测的行为，包括程序崩溃、数据损坏或者安全漏洞。</p><p>悬空指针（Dangling Pointer）</p><p>悬空指针是指向了一块已经被释放的内存的指针。当使用例如<code>free</code>或<code>delete</code>操作释放了一块内存之后，原本指向那块内存的指针就成了悬空指针。与野指针不同，悬空指针之前是指向有效内存的，但在内存释放后继续使用它就变得危险了。因为那块内存可能已经被重新分配给其他用途，对悬空指针的引用或操作可能会导致数据损坏或者不稳定的行为。</p><h4 id="引用与指针-v2"><a class="header-anchor" href="#引用与指针-v2"></a>引用与指针</h4><p>Q：什么时候用引用什么时候用指针？</p><p>A：需要返回局部变量的内存时用指针，返回局部变量的引用没有意义，需要传递类对象作为参数时需要使用引用</p><h4 id="this指针"><a class="header-anchor" href="#this指针"></a>this指针</h4><p>概念此处不再叙述，详情在前面章节</p><p>Q: 什么时候被创建</p><p>A: this在成员函数的开始执行前构造，在成员的执行结束后清除</p><p>Q: 存储位置？</p><p>A：this指针会因编译器不同而有不同的放置位置</p><p>Q: this如何找到需要调用的函数的?</p><p>A: this指针的传递实质上是通过函数参数的首参数（很像python的self）进行传递。<code>this</code>指针使得成员函数能够知道它们是为哪个对象的实例操作</p><p>Q: this指针是如何访问类中的变量的？</p><p>A: 成员函数内部访问成员变量时,编译器会隐式地将其转换为通过<code>this</code>指针的访问.编译器在大多数情况下会自动处理对成员变量的访问,将其转换为通过<code>this</code>指针的访问.</p><h3 id="RAII"><a class="header-anchor" href="#RAII"></a>RAII</h3><p>Resource Acquisition Is Initialization(RAII)</p><p>核心思想是：在对象的生命周期内获取所需的资源，并在对象销毁时释放这些资源。这种方式利用了C++的构造函数和析构函数自动调用的特性，确保资源使用安全且高效</p><h3 id="OO"><a class="header-anchor" href="#OO"></a>OO</h3><p><strong>封装、继承</strong></p><p><strong>多态</strong></p><ul><li>多态，即多种状态（形态）。简单来说，我们可以将多态定义为消息以多种形式显示的能力。</li><li>多态是以封装和继承为基础的。</li><li>C++ 多态分类及实现：<ol><li>重载多态（Ad-hoc Polymorphism，编译期）：函数重载、运算符重载</li><li>子类型多态（Subtype Polymorphism，运行期）：虚函数</li><li>参数多态性（Parametric Polymorphism，编译期）：类模板、函数模板</li><li>强制多态（Coercion Polymorphism，编译期/运行期）：基本类型转换、自定义类型转换</li></ol></li></ul><p><strong>静态多态</strong> - 函数重载</p><p><strong>动态多态</strong></p><ul><li>虚函数：用 virtual 修饰成员函数，使其成为虚函数</li><li>动态绑定：当使用基类的引用或指针调用一个虚函数时将发生动态绑定</li></ul><p><strong>注意：</strong></p><ul><li>可以将派生类的对象赋值给基类的指针或引用，反之不可</li><li>普通函数（非类成员函数）不能是虚函数</li><li>静态函数（static）不能是虚函数</li><li>构造函数不能是虚函数（因为在调用构造函数时，虚表指针并没有在对象的内存空间中，必须要构造函数调用完成后才会形成虚表指针）</li><li>内联函数不能是表现多态性时的虚函数</li></ul><h3 id="友元"><a class="header-anchor" href="#友元"></a>友元</h3><p>友元函数和友元类</p><ul><li>能访问私有成员</li><li>破坏封装性</li><li>友元关系的单向性</li><li>友元关系不可传递（不可被继承不可被传递）</li><li>友元关系的单向性</li><li>友元声明的形式及数量不受限制</li></ul><h3 id="内存分配"><a class="header-anchor" href="#内存分配"></a>内存分配</h3><p><strong>malloc、calloc、relloc - free</strong></p><ol><li><strong>malloc</strong>：<ul><li><strong>函数原型</strong>：<code>void* malloc(size_t size);</code></li><li><strong>功能</strong>：在堆上分配指定字节数的内存空间，并返回指向分配内存的指针。它不会初始化分配的内存，因此内存中的值是未定义的。</li><li><strong>使用</strong>：通常用于动态分配单个对象或一段连续的内存块。</li></ul></li><li><strong>calloc</strong>：<ul><li><strong>函数原型</strong>：<code>void* calloc(size_t num, size_t size);</code></li><li><strong>功能</strong>：在堆上分配指定数量和大小的连续内存块，并将内存初始化为零。</li><li><strong>使用</strong>：通常用于动态分配数组或结构体等需要初始化为零的内存。</li></ul></li><li><strong>realloc</strong>：<ul><li><strong>函数原型</strong>：<code>void* realloc(void* ptr, size_t size);</code></li><li><strong>功能</strong>：重新分配之前通过 malloc、calloc 或 realloc 分配的内存块的大小。如果旧的内存块大小足够容纳新的大小，则不会分配新的内存，而是扩展或缩小原有内存块。</li><li><strong>使用</strong>：常用于调整动态分配内存的大小，例如在动态数组扩展或缩小时使用。</li></ul></li></ol><p><strong>new - delete</strong></p><ol><li>new / new[]：完成两件事，先底层调用 malloc 分配了内存，然后调用构造函数（创建对象）。</li><li>delete/delete[]：也完成两件事，先调用析构函数（清理资源），然后底层调用 free 释放空间。</li><li><strong>new 在申请内存时会自动计算所需字节数，而 malloc 则需我们自己输入申请内存空间的字节数</strong>。</li></ol><h3 id="delete-this？"><a class="header-anchor" href="#delete-this？"></a>delete this？</h3><p><code>delete this</code> 是合法的，但是要非常小心使用。<code>delete this</code> 语句用于在对象的成员函数中释放该对象的内存，但这种操作需要确保在调用该语句之后，不再访问已释放的内存，否则会导致未定义的行为或程序崩溃</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Destroying object...&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">        <span class="keyword">delete</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">doSomething</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Doing something...&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">        <span class="comment">// 使用成员函数中的 delete this</span></span><br><span class="line">        <span class="built_in">destroy</span>();</span><br><span class="line">        <span class="comment">// 试图访问已释放的内存，这是不安全的</span></span><br><span class="line">        <span class="comment">// std::cout &lt;&lt; &quot;After deletion...&quot; &lt;&lt; std::endl;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">MyClass</span>() &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Destructor called.&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    MyClass* obj = <span class="keyword">new</span> <span class="built_in">MyClass</span>();</span><br><span class="line">    obj-&gt;<span class="built_in">doSomething</span>(); <span class="comment">// 调用 delete this</span></span><br><span class="line">    <span class="comment">// 尝试访问已释放的内存</span></span><br><span class="line">    <span class="comment">// obj-&gt;doSomething();</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">\\Doing something...</span><br><span class="line">\\Destroying object...</span><br><span class="line">\\Destructor called... </span><br></pre></td></tr></table></figure><p>Q:如果在类的析构函数中调用delete this，会发生什么</p><p>A:无限递归导致stackoverflow</p><h3 id="经典排序"><a class="header-anchor" href="#经典排序"></a>经典排序</h3><p><img src="https://cuijiahua.com/wp-content/uploads/2018/01/algorithm_9_3.png" alt=""></p><h1 id="计网"><a class="header-anchor" href="#计网"></a>计网</h1><h1 id="OS"><a class="header-anchor" href="#OS"></a>OS</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;起始&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#起始&quot;&gt;&lt;/a&gt;起始&lt;/h1&gt;
&lt;p&gt;这篇文章应该是 blog 里更的第二篇文章，最近开始准备今年夏季实习的事情，虽然C/C++&amp;amp;CSharp都会一点，但是感觉实习面试时的问题我会答不</summary>
      
    
    
    
    <category term="Learning" scheme="https://ninokz.github.io/categories/Learning/"/>
    
    
    <category term="C++" scheme="https://ninokz.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://ninokz.github.io/2023/04/30/hello-world/"/>
    <id>https://ninokz.github.io/2023/04/30/hello-world/</id>
    <published>2023-04-30T15:00:01.604Z</published>
    <updated>2023-04-30T18:28:26.668Z</updated>
    
    <content type="html"><![CDATA[<p>天生万物以养民，民无一善可报天。<br>不知蝗蠹遍天下，苦尽苍生尽王臣。<br>人之生矣有贵贱，贵人长为天恩眷。<br>人生富贵总由天，草民之穷由天谴。<br>忽有狂徒夜磨刀，帝星飘摇荧惑高。<br>翻天覆地从今始，杀人何须惜手劳。<br>不忠之人曰可杀！不孝之人曰可杀！<br>不仁之人曰可杀！不义之人曰可杀！<br>不礼不智不信人，大西王曰杀杀杀！<br>我生不为逐鹿来，都门懒筑黄金台，<br>状元百官都如狗，总是刀下觳觫材。<br>传令麾下四王子，破城不须封刀匕。<br>山头代天树此碑，逆天之人立死跪亦死！</p><p><s>快说，谢谢大西王</s></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;天生万物以养民，民无一善可报天。&lt;br&gt;
不知蝗蠹遍天下，苦尽苍生尽王臣。&lt;br&gt;
人之生矣有贵贱，贵人长为天恩眷。&lt;br&gt;
人生富贵总由天，草民之穷由天谴。&lt;br&gt;
忽有狂徒夜磨刀，帝星飘摇荧惑高。&lt;br&gt;
翻天覆地从今始，杀人何须惜手劳。&lt;br&gt;
不忠之人曰可杀！不孝之</summary>
      
    
    
    
    
  </entry>
  
</feed>
